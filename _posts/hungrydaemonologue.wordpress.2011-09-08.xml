<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.2" created="2011-09-08 05:15" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Hungry Daemonologue</title>
	<link>http://hdemon.net</link>
	<description>Hungry Daemonologue</description>
	<pubDate>Thu, 08 Sep 2011 05:15:59 +0000</pubDate>
	<language>ja</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://hdemon.net</wp:base_site_url>
	<wp:base_blog_url>http://hdemon.net</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>hdemon</wp:author_login><wp:author_email>zeitdiebe@gmail.com</wp:author_email><wp:author_display_name><![CDATA[hdemon]]></wp:author_display_name><wp:author_first_name><![CDATA[Masami]]></wp:author_first_name><wp:author_last_name><![CDATA[Yonehara]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.2</generator>

	<item>
		<title>Apache Rollerを試す。導入時の、初心者ならではのつまづき易い点まとめ。</title>
		<link>http://hdemon.net/archives/35</link>
		<pubDate>Mon, 16 May 2011 13:32:02 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/wordpress/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<p>今までMovableType4 -&gt; WordPress3.xと使ってきて、WordPressに一応満足しているのですが、倦怠期の夫婦よろしく刺激が足りなくなってきたので、Apache Rollerを試してみることにしました。Javaで動作するなんて刺激的じゃあありませんか。</p>
<p>&hellip;が、インスコの過程で大変つまづいたので、せっかくですからその記録を残したいと思います。ところで現時点での私のLinuxスキルを申し上げておきますと、ググりながらWebサーバをなんとか自力で構築できる程度の知識はありますが、Tomcatを入れるのは今回が初めてです。</p>
<h1>CLASSPATHでつまづく。</h1>
<p>初心者の登竜門らしいですね。このサーバではFedoraを使っているので、/etc/profile/もしくは/etc/profile.d/の.shファイルに適切なスクリプトを書けばいいわけですが、<strong><span style="color:#ff8c00;">.jarファイルについては逐一絶対パスを書かなければいけない</span></strong>ということを知らず、jarファイル群の存在する/libとかにパスを通しておけばいいんだろと考えていたら、案の定「JDBCが存在しない」エラーに悩まされました。つまるところ、printenvで環境変数を確認したときに、</p>
<pre class="code">CLASSPATH=....:/usr/bin/java/default/lib/mysql-connector-java-3.1.14-bin.jar:...
</pre>
<p>こんな風になっていないといけないということですよね。ちなみに、<strong><span style="color:#ff8c00;">J/Connectorは3.1.xにするのが安牌だよ</span></strong>という指示がInstall Guideにあったので、あえて最新の5.xにはしていません。</p>
<h1>足りないAPIがわからずつまづく。</h1>
<p>ここまでInstall Guideの指示通りに行っているのであれば、</p>
<ul>
	<li>JDK</li>
	<li>Tomcat 6 or 7</li>
	<li>MySQL</li>
	<li>J/Connector 3.1.x</li>
</ul>
<p>の導入が済んでおり、MySQLでのroller用のユーザ作成と権限付与、データベース作成までできていることと思います。</p>
<p>そしてroller-custom.propertiesをGuide通りに作成し、Tomcatのマネージャ画面ないしは直URLでrollerにアクセスするわけですが、ここで私はまるまる２日程つまづきました。もちろん解決して今に至るのですが、初心者的失敗パターンとしては次の３つがあるような気がします。エラー解決策を求めてここにたどり着いた方は、ご自身のエラー症状と照らし合わせて判断して下さい。</p>
<h1>起動には成功するが、&quot;Roller Weblogger has not been bootstrapped yet&quot;というエラーが出て先に進めない。</h1>
<p>この画面が出る場合、DBの設定に失敗していると思われます。つまり、</p>
<ul>
	<li>roller-custom.propertiesが存在しないか、パスの通っていない場所におかれている。</li>
	<li>roller-custom.propertiesに記載しているDBのIDとパスワードが一致しない。</li>
	<li>そもそもroller用データベースの作成や、ユーザの権限付与に失敗している。</li>
</ul>
<p>のどれかでしょう。私はrollerの導入時に試行錯誤した結果、パスの通った複数のpropertiesファイルが出来上がってしまい、誤った記載のpropertiesファイルが優先的に参照されていたりしました。</p>
<h1>起動に失敗するが、roller.logを見ると成功している。ただし、localhost.logには&quot;java.lang.NoClassDefFoundError: javax/mail/Authenticator&quot;と出力されている。</h1>
<p>１を経て問題を修正し、これでいける！と思った後に来るエラーです。今度は起動にすら失敗するので、問題が悪化したように見えますが、そうではありません。まず、tomcatの/logs/roller.logに次のようなログはないかを確認します。</p>
<pre class="code">INFO 2011-05-19 01:51:48,317 DatabaseProvider:successMessage - SUCCESS: Got parameters. Using configuration type JDBC_PROPERTIES
INFO 2011-05-19 01:51:48,405 DatabaseProvider:successMessage - -- Using JDBC driver class: com.mysql.jdbc.Driver
INFO 2011-05-19 01:51:48,406 DatabaseProvider:successMessage - -- Using JDBC connection URL: jdbc:mysql://localhost:3306/rollerdb
INFO 2011-05-19 01:51:48,407 DatabaseProvider:successMessage - -- Using JDBC username: *****
INFO 2011-05-19 01:51:48,407 DatabaseProvider:successMessage - -- Using JDBC password: [hidden]
INFO 2011-05-19 01:51:48,458 DatabaseProvider:successMessage - SUCCESS: loaded JDBC driver class [com.mysql.jdbc.Driver]
</pre>
<p>こう出力されていれば、DB関連の問題は解消されている&hellip;はず（そうでなければ、FATALとかERRORとか「DatabaseProvider:errorMessage」などと記録されているはず。）。しかし起動しない。そこで、次に同ディレクトリのlocalhost.logを確認して下さい。</p>
<pre class="code">2011/05/19 02:21:50 org.apache.catalina.core.StandardContext listenerStart
致命的: クラス org.apache.roller.weblogger.ui.core.RollerContext のリスナインスタンスにコンテキスト初期化イベントを送信中の例外です
java.lang.NoClassDefFoundError: javax/mail/Authenticator
</pre>
<p>つまり、mail関連のクラスが見つからないからどうにかしろ、ということのようです。そしてこのエラーについては、実は<a href="https://cwiki.apache.org/confluence/display/ROLLER/InstallationFAQs">本家のwiki</a>にも言及があります(FAQの一番下）。やっぱり問題が起こったら、本家のドキュメントから丁寧にあたっていくべきですね。</p>
<p>さて解決法ですが、 <a href="http://www.oracle.com/technetwork/java/javamail/index.html">ここ</a>からJavaMail APIを落としてきて、パスの通ったディレクトリに入れておけばいいようです。私はそれでうまく動作しました。</p>
<h1>Rollerのいいところ悪いところ</h1>
<p dir="ltr">ここまでをチェックし実践すれば、あとはhttpd等に問題がなければ動作すると思われます。私も誰かに「教える」という程の余力はないので、インストールTipsはこれくらいにして、実際にRollerを２，３日いじってみた感想とベンチマークをお知らせしたいと思います。</p>
<h2 dir="ltr"><strong>いいところ</strong></h2>
<ul dir="ltr">
	<li>Velocityエンジンにより、テンプレートが非常に見やすい。WPのように、PHPタグが乱れ咲いて分かりづらいということはない。</li>
	<li>応答速度は悪くない。キャッシュプラグインを導入したWPと同等か、少し遅いぐらい。</li>
</ul>
<p>特に応答性能については意外でした。DB処理速度はともかく、図体のでかいTomcatは、リクエスト受信から処理開始までの機敏性でmod_phpに負けるんだろうと思っていたからです。以下が、<a href="http://webwait.com/">http://webwait.com/</a>&nbsp;を利用して比較した結果です。</p>
<pre class="code"><span style="font-size:12px;">画像なし2000文字エントリー x 10を投稿し、最新投稿のページに対して5秒おき30回のリクエストを行った場合の、ロード完了までの平均時間。</span>
<span style="font-size:10px;">環境：Celeron M 352 / MEM 1GB / SSD &nbsp; / &nbsp;Fedora 14 /&nbsp;Tomcat 7.0 / MySQL 5.1 / Apache 2.2</span>
&nbsp;
WP						1.14s
WP + WP Super Chace		0.43s
Roller					0.58s
</pre>
<p>たかだか10個のエントリーなので実情には即していませんが、「Rollerはそんなに遅くはないだろう」ぐらいの参考にはなると思います。ちなみに、Rollerが生成されたページをキャッシュする機構を備えているかどうかはよく分かりません。</p>
<h2><strong>悪いところ</strong></h2>
<ul dir="ltr">
	<li>プラグインが少ないというか、無い。</li>
	<li>WYSIWYGエディタはなかなかいいが、画像をサムネイルでしか埋め込めない。</li>
</ul>
<p>テーマは探せば出てくるんですけどねえ&hellip;探し方の問題なのか、プラグインは見つけられていません。WPでもプラグインは対して入れてないので、まあいいんですけどね。人によっては致命的でしょう。</p>
<p>どちらかというと、画像埋め込みがサムネイル限定という方が困ります。つまり、Rollerのツールを使って記事に画像を配置しようとすると、極小サイズに固定されるということです。しかも、縮小表示ではなくご丁寧にサムネイルを生成してくれているようなので、CSS側で調整することもできません。</p>
<p>ただし、<span style="color:#ff8c00;"><strong>以上の点は単に私が把握していないだけで、可能であるかもしれない</strong></span>ことをお断りしておきます。もし間違っていたら教えて下さい。</p>
<h1>それで・・・WPから切り替えるんですか。</h1>
<p>そうですねえ&hellip;ここ半年ぐらいはWPのままでいようかと思います（笑）</p>
<p>今回は何がブログツール選択の決め手になっているのかを考えるいい機会になりました。速度だけならRollerはWPに遜色はありませんし、Tomcat設定の手間も基本的に一度きりですから、Rollerを選ぶ大きな障害にはなりません。テンプレートは多分Rollerの方が書いてて楽しいでしょう。</p>
<p>しかし、これから先このツールで記事を書いてうんざりしないだろうか、ということを考えたとき、やはりWPは完成度が高く映り、魅力的なのです。それはプラグインもだし、本体もです。<strong><span style="color:#ff8c00;">Java vs PHP というミーハー心</span></strong>でRollerを試してみましたが、今回は実用性を採ろうと思います。</p>
<p>しかし、私の用途では動的生成でなくてもいいと改めて思いました。むしろ静的生成で、Cか話題のGoなんかでシンプルに作った俊足ブログツールとか面白そうだと思いませんか。開発中のChrome用エクステンションが落ち着いたら、考えてみたいと思います。</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2011-05-16 13:32:02</wp:post_date>
		<wp:post_date_gmt>2011-05-16 13:32:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="roller"><![CDATA[Roller]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[hello-world]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>(function(){ ... })(); って、どうしてこんなにカッコ付けてるの？</title>
		<link>http://hdemon.net/archives/305</link>
		<pubDate>Thu, 17 Mar 2011 15:14:59 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[<p>これを書くことで、どういう効果があるのか。</p>
<p><strong><span style="color: #ff8c00;">グローバル変数の使用を抑え、他のスクリプトとの変数衝突を防げます。</span></strong>これは「即時関数」"immediate function"と呼ばれる慣用表現で、function 内で宣言された変数は、スコープがそのfunction内部に限定されるという仕組みを利用しています。したがって、グローバル領域でこれを使えばグローバル変数を一つも使わなくて済むわけです。別の表現をすれば、「グローバル領域にただ１つの関数だけを用意してその中に処理を全部書いてしまえば、処理は全部ローカル領域で行われる事になるよね」という事でもあります。</p>
<p>そうすると、次のような問題の発生を防止できます。例えば、自分のブログに他人が作ったガジェットを導入しているとしましょう。そのブログに、さらに自作のガジェットを追加したいと考えたとします。その時、２つのガジェットを同じページに導入するのであれば、２つのスクリプトは同じグローバル領域を共有することになります。ということは、万が一２つのガジェットが同じ名前の変数ー例えばforで使うiとか、urlとか、idとかresultとか、そういうありふれた変数名を使っていたとすれば、一方で代入した値が他方で使われ、誤作動の原因となる可能性が出てきます。</p>
<p>こういう事故を防ぐために、たとえ同じ変数名を使用していたとしても、それらが衝突しないような領域＝名前空間を作る処方がこの表現です。</p>
<h1>なぜfunctionを括弧でくくるのか？</h1>
<p>一言で言えば、<strong><span style="color: #ff8c00;">functionという語を宣言ではなく式として評価させるため</span></strong>なのですが、その意味を理解ためにはもう少し細部を見なければなりません。 まず、先の「グローバル変数を使わないように、スコープを限定する」という目的を達成するには、次のことが必要です。</p>
<ol>
<li>この表現を他の関数内部ではなく、グローバル領域で行うこと。</li>
<li>関数の中身が即座に評価＝実行されること。</li>
</ol>
<p>つまりすでにローカルな領域でやっても意味が無いし、かつこの関数は再利用されるわけでもないから、グローバル領域で定義すべきだし、かつ他の命令を実行する前に即効果を発揮させなければあんまり意味ないよねということです。</p>
<p>そして、この表現は全体を１つの関数としてみなしてしまう事で実現するわけですが、関数を定義しただけでは意味がなく、定義すると同時に実行することで先の目的を達成します。全体をカッコでくくるのは、「実行」するための準備の１つなのです。</p>
<h1>関数を即実行するための条件</h1>
<p>では、関数を即座に実行するためには何が必要か。それは関数を呼び出すための演算子である()です。そして、この関数呼び出し演算子を使うための前提条件が、全体を囲むもうひとつの()なのです。 というのは、次の２段階のルールが存在するからです。</p>
<ul>
<li>行頭にfunctionの語が認められた場合、それはfunction Expressionではなくfunction Declaration、つまり「式」ではなくfunction命令による「宣言」だと解釈されるというルール。</li>
<li>宣言と解釈された文の末尾に付いた()は、関数呼び出し演算子ではなく、グルーピングを行う演算子だと解釈するというルール。</li>
</ul>
<p>すなわち、functionという語の前に何も無い場合、いくら末尾に()を付けても関数はその時点では実行されないことになります（何もないというより、functionの直前でそれ以前の式が完結していると言うべきかもしれませんが）。次のコードを見てください。</p>
<pre lang="javascript"><strong>//a</strong>
function foo (n) {
	console.log(n*2);
}(1); // 実行されれば、2が出力されるはず。

<strong>//b</strong>
foo(2); // 実行されれば、4が出力されるはず。

<strong>//c</strong>
(function bar(n) {
	console.log(n*2);
}(3)); // 実行されれば、6が出力されるはず。

<strong>//d</strong>
bar(4); // 実行されれば、8が出力されるはず。
</pre>
<p>このコードを実行すると、次の結果が得られます。</p>
<pre lang="javascript">4
6
ReferenceError: bar is not defined
</pre>
<p>ここから言えることは、</p>
<ul>
<li>//aは実行されていない。の(5)は引数入りの関数呼び出し演算子とはみなされていない。</li>
<li>//bは実行され、//aで宣言された関数通りに引数に2倍した結果が返ってきた。</li>
<li>//cは実行され、(5)が引数入りの関数呼び出し演算子として認められた。</li>
<li>しかし、//cは関数宣言とはみなされなかったため、//dの呼び出しは失敗した。</li>
</ul>
<p>ということです。そして、即時関数は//cに当たるわけですが、</p>
<ul>
<li>宣言ではなく式である。</li>
<li>その式が即座に実行されている。</li>
</ul>
<p>という特徴があることが分かります。まとめると、</p>
<ul>
<li>(function foo(a) {...}(5));の最も外側の括弧はグルーピング演算子であり、function を行頭にさせないことでfunctionの意味を宣言ではなく式とみなさせるという効果を持つ。</li>
<li>5を囲うカッコは関数呼び出し演算子であり、式として見做されたfunctionを実行する効果を持つ。</li>
</ul>
<p>ということです。それゆえ、外側に括弧がついているのです。</p>
<h1>関数リテラルによる関数定義と、即時関数の違い</h1>
<p>そして、行頭に function がこなければいいということで、functionを式とみなすという意味では、いつもの関数リテラルによる定義でも内部変数をローカル化する点で効果は同じなわけです。もちろん var foo としてしまうため、一番外側で使えばグローバル変数を１つ使ってしまうわけですが。</p>
<pre lang="javascript">var foo = function(n) {
	console.log(n*2);
}(5); //10

console.log(n); //undefind
//関数内のnは、グローバル領域からは呼び出せない。
</pre>
<p>ちなみに今のコードは、即時関数の戻り値を変数に代入しようとしているとみることもできるでしょう。今のコードにはreturn文はありませんでしたが、</p>
<pre lang="javascript">var foo = function(a) {
	a *= 2;
	console.log(a);
	return a;
}(5); //10

var bar = (function(a) {
	a *= 2;
	console.log(a);
	return a;
}(5)); //10

console.log(foo*2); //20
console.log(bar*2); //20
console.log(a); //undefind</pre>
<p>という感じに、即時関数の結果を代入することと、関数リテラルによる関数定義に関数呼び出し演算子をくっつけることは、（内部的にも全く同じかどうかはわかりませんが）ローカルスコープを用意するという意味では同じ効果を生むということです。ただし、fooの表現は関数定義したいのか即時関数を作りたいのかが分かりにくいので、barのように括弧で括ったほうがいいとオライリー本に書いていました。確かに、fooの方は末尾の()を見るまで即時関数かどうかはわかりませんよね。</p>
<h1>()); なのか、それとも )(); なのか。</h1>
<pre lang="javascript">(function foo(a) {
	console.log(a*2);
}(5)<strong><span style="color: #ff8c00;">)</span></strong>; //10

(function foo(a) {
	console.log(a*2);
}<strong><span style="color: #ff8c00;">)</span></strong>(5); //10</pre>
<p>これは最初僕も混乱しましたし、２つコードの挙動は当然異なるんだろうと思っていました。しかし「functionが行頭かどうか」という点でこの２つは同じですから、即時関数の機能に違いはありません。オライリー本にそう書いてあるんだから、僕は信じます。 …が、そのオライリー本によれば、JSLint的には前者の記述が推奨されるそうです。個人的には、<strong><span style="color: #ff8c00;">圧倒的に後者の方が他人のライブラリ等でお目にかかる機会が多いように思う</span></strong>んですけどね。また、JSLintが前者を推奨する理由についても未確認です。ごめんなさい。</p>
<h1>今回の事を簡潔に言うとこんな感じ。</h1>
<ul>
<li>グローバル変数を使いたくないので、関数の内側はローカル変数扱いという性質を利用したい。</li>
<li>ということは、関数を１つだけ用意して全ての処理をその中に書き、その関数を即実行すればいい。</li>
<li>即実行するには、()を付ければいいじゃない。</li>
<li>でも、function(){...}();ってやると実行してくれない。functionが「命令」と解釈されるのが原因のようだ。</li>
<li>だから(function(){...})とやって、functionを「式」として解釈してもらった上で()を付けよう。</li>
</ul>
<h1>今回参考にしたHP</h1>
<p><a href="http://kangax.github.com/nfe/">http://kangax.github.com/nfe/</a> Juriy Zaytsev氏</p>
<p><a href="http://jibbering.com/faq/#scope">http://jibbering.com/faq/#scope</a> Garrett Smith氏</p>
<p><a href="http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/">http://dmitrysoshnikov.com/ecmascript/chapter-5-functions/</a> Dmitry A. Soshnikov氏</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2011-03-18 00:14:59</wp:post_date>
		<wp:post_date_gmt>2011-03-17 15:14:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>function-%e3%81%a3%e3%81%a6%e3%80%81%e3%81%a9%e3%81%86%e3%81%97%e3%81%a6%e5%a4%96%e5%81%b4%e3%81%ab%e6%8b%ac%e5%bc%a7%e3%82%92%e4%bb%98%e3%81%91%e3%81%a6%e3%82%8b%e3%81%ae%ef%bc%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Cornelia]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.41.240.125</wp:comment_author_IP>
			<wp:comment_date>2011-08-11 08:49:23</wp:comment_date>
			<wp:comment_date_gmt>2011-08-10 23:49:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Whoa, tihngs just got a whole lot easier.]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1313037201]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>jQuery.masonicol</title>
		<link>http://hdemon.net/archives/327</link>
		<pubDate>Tue, 22 Mar 2011 05:52:20 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=327</guid>
		<description></description>
		<content:encoded><![CDATA[<p><script type='text/javascript' src='http://hdemon.net/wp-content/uploads/2011/05/masonicol1.3.2.js'></script></p>
<p><strong>IE6以前では動作しません。jQuery 1.5.1による動作を確認しています。</strong></p>
<h4>どんなプラグインなの？</h4>
<p>ブロック要素を段組風に並べ直して、紙面のようなレイアウトへ変えます。つまり、こういうことです。</p>
<p><input name="string" onclick="$('#textWrapper').masonicol({'pageHeight':		600,	'pageWidth':		850,	'columnNum':		3,	'columnWidth':		243.5,	'pageMargin':		10,	'colMargin':		25});" type="button" value="masonicolを適用する" /></p>
<div style="border:2px solid #222; padding: 2px;">
	<div id="textWrapper" style="position: relative; border: 1px solid #222; padding:10px;">
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; ">&nbsp;</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; "><span style="font-size:14px;">最後の一枚の葉</span></p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; "><span style="font-size:14px;">The Last Leaf</span></p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; ">&nbsp;</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; ">オー・ヘンリー作</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; ">結城浩訳</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: center; ">&nbsp;</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; text-align: left; ">（中略）</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ある朝、灰色の濃い眉をした多忙な医者がスーを廊下に呼びました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「助かる見込みは ―― そう、十に一つですな」 医者は、体温計の水銀を振り下げながら言いました。 「で、その見込みはあの子が『生きたい』と思うかどうかにかかっている。 こんな風に葬儀屋の側につこうとしてたら、どんな薬でもばかばかしいものになってしまう。 あのお嬢さんは、自分はよくならない、と決めている。 あの子が何か心にかけていることはあるかな？」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「あの子は ―― いつかナポリ湾を描きたいって言ってたんです」とスーは言いました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「絵を描きたいって？ ―― ふむ。 もっと倍くらい実のあることは考えていないのかな ―― 例えば男のこととか」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「男？」スーは びあぼんの弦の音みたいな鼻声で言いました。 「男なんて ―― いえ、ないです。先生。そういう話はありません」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「ふむ。じゃあそこがネックだな」医者は言いました。 「わたしは、自分の力のおよぶ限りのこと、科学ができることはすべてやるつもりだ。 でもな、患者が自分の葬式に来る車の数を数え始めたら、 薬の効き目も半減なんだよ。 もしもあなたがジョンジーに、冬にはどんな外套の袖が流行るのか、 なんて質問をさせることができるなら、 望みは十に一つから五に一つになるって請け合うんだがね」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">医者が帰ると、スーは仕事部屋に入って日本製のナフキンがぐしゃぐしゃになるまで泣きました。 やがてスーはスケッチブックを持ち、 口笛でラグタイムを吹きつつ、胸を張ってジョンジーの部屋に入っていきました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ジョンジーはシーツをかけて横になっていました。 しわ一つもシーツに寄せることなく、顔は窓に向けたままでした。 ジョンジーが眠っていると思い、スーは口笛をやめました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">スーはスケッチブックをセットすると、 雑誌小説の挿絵をペンとインクで描きはじめました。 若い作家は文学の道を切り開くために雑誌小説を書きます。 若き画家は芸術の道を切り開くためにその挿絵を描かなければならないのです。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">スーが、優美な馬のショー用のズボンと片眼鏡を主人公のアイダホ州カウボーイのために描いているとき、 低い声が数回繰り返して聞こえました。 スーは急いでベッドのそばに行きました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ジョンジーは目を大きく開いていました。 そして窓の外を見ながら数を数えて ―― 逆順に数を数えているのでした。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「じゅうに」とジョンジーは言い、少し後に「じゅういち」と言いました。 それから「じゅう」「く」と言い、それから「はち」と「なな」をほとんど同時に言いました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">スーはいぶかしげに窓の外を見ました。 何を数えているのだろう？　そこには草もなく わびしい庭が見えるだけで、 煉瓦の家の何もない壁は二十フィートも向こうなのです。 根元が節だらけで腐りかかっている、 とても、とても古いつたがその煉瓦の壁の中ほどまで這っていました。 冷たい秋の風は つたの葉に吹き付けて、 もう裸同然となった枝は崩れかかった煉瓦にしがみついているのでした。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「なあに？」スーは尋ねました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「ろく」とジョンジーはささやくような声で言いました。 「早く落ちてくるようになったわ。三日前は百枚くらいあったのよ。 数えていると頭が痛くなるほどだったわ。 でもいまは簡単。 ほらまた一枚。もう残っているのは五枚だけね」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「何が五枚なの？　スーちゃんに教えてちょうだい」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「葉っぱよ。つたの葉っぱ。 最後の一枚が散るとき、わたしも一緒に行くのよ。 三日前からわかっていたの。 お医者さんは教えてくれなかったの？」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「まあ、そんな馬鹿な話は聞いたことがないわよ」スーはとんでもないと文句を言いました。 「古いつたの葉っぱと、あなたが元気になるのと、 どんな関係があるっていうの？　あなたは、あのつたをとても大好きだったじゃない、おばかさん。 そんなしょうもないこと言わないでちょうだい。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">あのね、お医者さんは今朝、あなたがすぐによくなる見込みは ―― えっと、 お医者さんが言ったとおりの言葉で言えば ―― 「一に十だ」って言うのよ。 それって、ニューヨークで電車に乗るとか、 建設中のビルのそばを通るぐらいしか危なくないってことよ。 ほらほら、スープを少し飲んで。 そしてこのスーちゃんをスケッチに戻らせてね。 そしたらスーちゃんは編集者にスケッチを売ってね、 病気のベビーにはポートワインを買ってね、 はらぺこの自分にはポークチョップを買えるでしょ」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「もう、ワインは買わなくていいわ」目は窓の外に向けたまま、ジョンジーは言いました。 「ほらまた一枚。ええ、もう、スープもいらないの。残りの葉は たったの四枚。 暗くなる前に最後の一枚が散るのを見たいな。そして私もさよならね」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「ジョンジー、ねえ」スーはジョンジーの上にかがみ込んで言いました。 「お願いだから目を閉じて、私の仕事が終わるまで窓の外を見ないって約束してくれない？　この絵は、 明日までに出さなきゃいけないのよ。 描くのに明かりがいるの。 でなきゃ日よけを降ろしてしまうんだけど」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「他の部屋では描けないの？」とジョンジーは冷たく尋ねました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「あなたのそばにいたいのよ」とスーは答えました。 「それに、あんなつたの葉っぱなんか見てほしくないの」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「終わったらすぐに教えてね」とジョンジーは言い、目を閉じ、 倒れた像のように白い顔をしてじっと横になりました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「最後の一枚が散るのを見たいの。もう待つのは疲れたし。 考えるのにも疲れたし。 自分がぎゅっと握り締めていたものすべてを放したいの。 そしてひらひらひらっと行きたいのよ。 あの哀れで、疲れた木の葉みたいに」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">「もうおやすみなさい」とスーは言いました。 「ベーアマンさんのところまで行って、 年老いた穴倉の隠遁者のモデルをしてもらわなくっちゃいけないの。 すぐに戻ってくるわ。戻ってくるまで動いちゃだめよ」</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ベーアマン老人はスーたちの下の一階に住んでいる画家でした。 六十は越していて、 ミケランジェロのモーセのあごひげがカールしつつ森の神サチュロスの頭から小鬼の体へ垂れ下がっているという風情です。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ベーアマンは芸術的には失敗者でした。 四十年間、絵筆をふるってきましたが、 芸術の女神の衣のすそに触れることすらできませんでした。 傑作をものするんだといつも言っていましたが、 いまだかつて手をつけたことすらありません。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ここ数年間は、ときおり商売や広告に使うへたな絵以外には まったく何も描いていませんでした。 ときどき、 プロのモデルを雇うことのできないコロニーの若い画家のためにモデルになり、 わずかばかりの稼ぎを得ていたのです。 ジンをがぶがぶのみ、これから描く傑作について今でも語るのでした。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ジンを飲んでいないときは、ベーアマンは気むずかしい小柄な老人で、 誰であれ、軟弱な奴に対してはひどくあざ笑い、 自分のことを、 階上に住む若き二人の画家を守る特別なマスチフ種の番犬だと思っておりました。</p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ベーアマンはジンのジュニパーベリーの香りをぷんぷんさせて、階下の薄暗い部屋におりました。 片隅には何も描かれていないキャンバスが画架に乗っており、 二十五年もの間、傑作の最初の一筆が下ろされるのを待っていました。 スーはジョンジーの幻想をベーアマンに話しました。 この世に対するジョンジーの関心がさらに弱くなったら、 彼女自身が一枚の木の葉のように弱くもろく、 はらはらと散ってしまうのではないか&hellip;。 スーはそんな恐れもベーアマン<span style="font-size:10px;">に話しました。</span></p>
		<p style="font-size: 10px; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; ">ベーアマン老人は、赤い目をうるませつつ、 そんなばかばかしい想像に、軽蔑と嘲笑の大声を上げたのです。</p>
		<p>&nbsp;</p>
	</div>
</div>
<div style="border-bottom: 1px solid #aaa"><span style="font-size: 10px; ">Copyright (C) 1999 Hiroshi Yuki （結城 浩）&nbsp;本翻訳は、この版権表示を残す限り、 訳者および著者にたいして許可をとったり使用料を支払ったりすること一切なしに、 商業利用を含むあらゆる形で自由に利用・複製が認められます。<a href="http://www.genpaku.org/">プロジェクト杉田玄白</a>正式参加作品。</span></div>
<div>&nbsp;</div>
<ul>
	<li>指定された要素を、左上から右下へ向けてカラムにそって並べます。</li>
	<li>要素が指定されたページの範囲に収まらない場合、次のページを自動的に生成します。</li>
	<li>つまり、雑誌風の段組を実現できるというわけです。</li>
</ul>
<h4>使用方法と引数について</h4>
<pre class="code">$(&quot;#textWrapper&quot;).masonicol({
	pageHeight :	600,			//ページの縦幅 <strong><span style="color:#ff8c00;">必須</span></strong>
	colmnNum : 	3,			//ページの横幅 <strong><span style="color:#ff8c00;">必須</span></strong>
	columnWidth : 	200,			//カラムの横幅 <strong><span style="color:#ff8c00;">必須</span></strong>
	pageMargin :	20,			//ページ間のマージン defalut: 20
	colMargin : 	20,			//カラム間のマージン defalut: 20
	padding : 		30 30 30 30	//ラッパー要素のpadding指定。
	//左からtop right bottom rightの指定。単位はpx固定で、後ろにpxを付けてはいけない。
};
</pre>
<p>整列させたい要素を別のブロックレベル要素でラッピングし、その要素をjQueryのセレクタで指定した上で、上記の引数を与えて下さい。なお、masonicolにおける「ページ」とは、要素を置き始めてから次のカラムに移るまでの縦幅を指します。</p>
<p>注意点</p>
<ul>
	<li>１つのブロック要素を整列の最低単位とするため、要素の大きさがまちまちだとカラムの高さに差が出ます。つまり、カラムの下部の余白が均等に埋まりにくくなりでこぼこしてしまいます。なるべく各要素を小さくし、要素間の大きさに差をなくした方が、綺麗に整列します。</li>
	<li>ラッパーのheightとwidthは自動的に変更されますが、position:absoluteで整列させているため、ラッパーのposition属性がstaticのままだとheightが0になります。</li>
	<li>内部要素に対する個別のmargin/paddingは0にすることをお勧めします。無視されるか、上手く反映されません。</li>
	<li>自動リサイズ機能は未実装です。リサイズに対応させるには、ご自分でイベントを設定し、スクリプトを適宜実行しなおして頂く必要があります。</li>
	<li>IE7以前では動作しません。また、Firefox3でページ最下部のマージンが短くなる事があるようです。後者については至急改善します。</li>
</ul>
<h4>Download</h4>
<p><a href="http://hdemon.net/wp-content/uploads/2011/05/masonicol1.3.2.js">masonicol1.3.2,js</a></p>
<p><a href="http://hdemon.net/wp-content/uploads/2011/05/masonicol1.3.2_min.js">masonicol1.3.2_min.js</a></p>
<h4>今後の予定</h4>
<ul>
	<li>ページ間やカラム間に、区切りライン等の装飾を入れるためのブロック要素挿入機能の実装。</li>
	<li>ページやカラムごとに内部的にブロック要素でラッピングする機能の実装。</li>
	<li>リサイズ時の対応。アニメーション機能付加。</li>
</ul>
<h4>履歴</h4>
<p>2010/5/26 v1.3.2 ページ枚数を余計に数えてしまうバグを修正。</p>
<p>2010/3/28 v1.3.1 ページ横幅指定方式から、カラム数指定方式へ変更。ラッパーに対するpadding引数の追加。</p>
<p>2010/3/23 v1.3 プロトタイプを公開</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date>2011-03-22 14:52:20</wp:post_date>
		<wp:post_date_gmt>2011-03-22 05:52:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>masonicol</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="not_article"><![CDATA[not article]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>クロスドメイン通信について、仕様書を読みながら整理する。</title>
		<link>http://hdemon.net/archives/469</link>
		<pubDate>Tue, 24 May 2011 15:47:21 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=469</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>以下の文章は私が個人的に調べた事をまとめたもので、断定口調で書いてありますが、正しさの保障はありません。むしろ間違いを見つけたら、指摘して頂けるとありがたいです。</strong>
ブラウザ上のスクリプトが行うクロスドメイン通信には、制約がある。でも考えてみれば、あるサーバがドメインの異なる別のサーバ間へリクエストすることは一般的な事だし、例えば自分のサーバへのアクセスを制限したければ、通常はパスワード認証やIPフィルタなどを使うだろう。
ということは、「ブラウザ上スクリプトのクロスドメイン通信」としてわざわざサーバ間通信と区別する以上、ブラウザを用いた通信には、パスワード認証やIPフィルタのみでは対応しきれない<strong>特殊なリスク</strong>があるからだと言える。
そしてそれは、
<ul>
	<li>サーバ間の通信は、クライアントとなる側が自前のスクリプトもしくは信頼した第三者のスクリプトで、自発的にリクエストする。</li>
	<li>しかし、ブラウジングはその性質上、閲覧した時点で、ほぼ自動的にページに埋め込まれたスクリプトも実行される。</li>
	<li>つまり、<strong>「他人の作った悪意のあるスクリプトを」「事前の調査なく」「半自動的に」実行してしまう</strong>可能性がある。</li>
</ul>
という点である。ただ、実行前にスクリプトの内容をいちいちユーザに確認させるようでは、利便性が大幅に損なわれブラウジングの意味が無くなる。そこで、半自動的に実行してしまうのはやむを得ないとしながら、それによって生まれるリスクをなるべく抑えるというアプローチを採っている（もちろん、ブラウザやその設定によっては、事前にユーザに確認をさせるだろう）。
具体的には、クロスドメイン通信を許してしまうことで、主に「クロスサイトスクリプティング（以下XSS)のバリエーションを増やす」、「DoS攻撃の踏み台に利用される」という２つのリスクを新たに生むことになる。
<strong>XSS：</strong>
不特定多数の人間が文字のメッセージを残せる掲示板やCMS等に、文章の代わりにタグを用いたJavaScript等のスクリプトを記述すると、そのサイトがスクリプトとして働く文字列を排除するロジックを持っていなければ、閲覧者のブラウザ上でそのスクリプトが動作し始めることになる。
この事自体はクロスドメイン通信の可否とは無関係に発生するが、それを許可してしまうとXSSをより効果的にしてしまう。具体的には、XSSによってCookie・キーイベント・DOM等から<strong>窃取したアカウント情報等を、さらに特定のサーバへ直接送信する</strong>ことが可能になり、XSSの目的をより直接的・効果的に達成する手段を与えることになる。
<strong>DoS攻撃：</strong>
ページに特定／不特定のサーバへ短期間の連続アクセスをするスクリプトを記述することで、閲覧者にサーバ攻撃の肩代わりをさせることが可能になる。この場合、アクセス元はスクリプトを置いてあるサーバではなくクライアントのIPになるため、攻撃を意図した者には非常に都合がいい。（DoS攻撃肩代わり防止の趣旨があったのかどうかイマイチ自信がなくなってきたので、一時削除訂正します。Level2では、サーバに負荷を掛けるだけなら何の障害もなくできてしまいますよね。）

というわけで、これらのリスクを減らすため、ブラウザ上で動作するスクリプトの機能を制限するルールとして「同一生成元ポリシー」"same origin policy" が設けられた。
<h1>同一生成元ポリシーとは？</h1>
サイト上のスクリプトがあるサーバへデータをリクエストする命令を出した場合、そのサイトとリクエスト先とで、
<ul>
	<li>ホスト</li>
	<li>ポート</li>
	<li>プロトコル</li>
</ul>
の全てが一致しない限り、リクエストを有効にしないというブラウザ上の制約。第三者との関連を断つという目的のもとでは、「ドメイン」だけに限定するのは不十分だからだ。
<h1>同一生成元ポリシーは、誰がいつ決めたルールなのか。</h1>
Netscape2.0が独自に実装したものが、他の主要ブラウザでも採用されるようになった。W3C等により共通仕様とされているわけではないが、セキュリティ上の必要性から主要ブラウザは全てこのポリシーを採用している。
HTML5の勧告では"Cross-Origin Resource Sharing"（以下CORS)というセクションで、より具体的な仕様として定められている。ただし、CORSは<strong>"non-normative"</strong>とされ、この仕様を実装するかどうかは「W3C準拠」とは関係ない（？）。
<h1>クロスドメイン通信禁止の例外</h1>
しかし、クロスドメイン通信を直接／間接的に可能にする方法がいくつかある。
<ol>
	<li>XMLHttpRequest Level2 / XDomainRequest を使う。</li>
	<li>JSONPを使う。</li>
	<li>プロキシを使う。</li>
</ol>
１は前者がW3Cが策定中の共通仕様であり、後者はIEの独自機能。どちらも、クロスドメイン通信を行う正規の手段。リクエスト／レスポンスヘッダを主な基準としたCORSの条件（後者はやはり独自基準）をパスした場合にのみ、最終的にデータへアクセスすることを可能にする。
２は、＜scirpit＞
タグで外部のスクリプトが読み込める事を利用した、クロスドメイン制限回避の例外的手法。リクエスト先のサーバがJSONPの形でデータを返す対応していることが条件。
３は、第三のサーバを中継し直接的にはサーバ間の通信とすることで、同一生成元ポリシーの対象から外れる手法。当然、中継する機能を持ったサーバが必要。
ここでXMLHttpRequestについてまとめておくと、
<ul>
	<li>XMLHttpRequest Level1と同一生成元ポリシーは共通仕様ではなく、具体的な実装や細かい条件はブラウザによって異なる。</li>
	<li>XMLHttpRequest Level2はW3Cの共通仕様である。したがって、必ず実装すべき仕様と、裁量に任される部分が分かれる。</li>
	<li>XMLHttpRequest Level2は、CORSのルールに従う。これは同一生成元ポリシーと根本的な趣旨を同じくするが、クロスドメイン通信を許可するための条件がより具体的で複雑化している。</li>
	<li>ブラウザにXMLHttpRequest Level1とLevel2の２つのメソッドが同居するのではなく、Level2に置き換わる。つまり、Level2に準拠する限り、XMLHttpRequestはCORSのルールに従う。</li>
	<li>ただし、XMLHttpRequest Level2とCORSとHTML5は独立したセクションであり、かつ現時点（2011/5)では全てドラフトであり、また前二者は"non-normative"である。</li>
</ul>
仕様書：<a href="http://www.w3.org/TR/cors/#cross-origin-request">http://www.w3.org/TR/cors/#cross-origin-request</a>
という感じである。したがって、各社のブラウザがどのように対応しているかは、個別に調べるか実験してみるかでしか判断できない。
<h1>XMLHttpRequest Level2とCORSは、具体的にはどういうルールなの？</h1>
Level2では、クロスドメイン通信は条件付きで解禁される。そしてその条件に合致しているかどうかは、<strong>主にリクエストヘッダとレスポンスヘッダによって判断される</strong>（また、クロスドメイン通信が可能かどうかをサーバ側に問い合わせる、"preflight request"という予備的な通信を行う場合も規定されている）。
つまり、Level2の場合は「こちら側の身元をリクエストヘッダで明らかにした上で、とりあえずリクエストしてみる」ということを行う。それに対し、サーバ側はヘッダを見てデータを返さないということもできるが、「どのような場合にデータをユーザまで渡すことを許可するか」というヘッダをデータと一緒に返すこともできる。これをもっと平たく言えば、サーバはクライアントの要求したデータと一緒に、<strong>「ちなみに我々は、こういうドメインからのリクエストの場合のみ、最終的にユーザにデータを渡す事を許可しているから、ブラウザさん検閲よろしく」</strong>というメッセージも送っているということだ。
そのヘッダにはいくつか種類があるのだが、<strong>「Access-Control-Allow-Origin レスポンスヘッダ」</strong>と<strong>「Origin リクエストヘッダ」</strong>が主要な役割を担うと思われる。これらのヘッダについて、次のようなルールが設けられている。
<ul>
	<li>Access-Control-Allow-Origin ヘッダに"*"が含まれるときは、クロスドメイン通信を許可する。</li>
	<li>Access-Control-Allow-Origin ヘッダが１つもないか、あるいは複数存在するときは不許可。</li>
	<li>Access-Control-Allow-Origin がOriginヘッダと一致しない場合も不許可。</li>
</ul>
<p style="margin-left: 40px;"><span style="font-size: 10px;">※credential flag等の条件があるが、ややこしくなるので省略。
「許可する」というのは、繰り返しになるが「リクエストを送らない」ということではなく、ユーザにデータを受け渡さないということ。仕様書では、リクエストが返ってきたときの処理に関して、</p>

<blockquote><strong>6.1.5. Cross-Origin Request with Preflight </strong> This is the actual request. Apply the make a request steps and observe the request rules below while making the request. <strong>If the response</strong> has an HTTP status code of 301, 302, 303, or 307 Apply the cache and network error steps. ... Otherwise <strong>Perform a resource sharing check.</strong> If it returns fail, apply the cache and network error steps. Otherwise,<strong> if it returns pass, terminate this algorithm and set the cross-origin request status to success. </strong>Do not actually terminate the request.

 <strong>6.1.2. Cross-Origin Request Status</strong> Each cross-origin request has an associated cross-origin request status that CORS API specifications that <strong>enable an API to make cross-origin requests can hook into.</strong> It can take at most two distinct values over the course of a cross-origin request. The values are: preflight complete The user agent is about to make the actual request. success The resource can be shared. abort error The user aborted the request.</blockquote>
このように書いており、resourceをユーザにshareするかどうかは、レスポンスが返ってきてから判断するとされていることが分かる。
<h1>サーバは期待通りレスポンスするが、ブラウザが検閲して見せてくれないことの証拠</h1>
<span style="text-decoration: underline; color: #333333;"><strong>以下については、Chrome 11 / Firefox 4 / Safari 5 で確認しました。Opera 11とIE9では再現できていません。</strong>
このことを実験して確かめてみる。XMLHttpRequestを利用して、あえて不可能なクロスドメインリクエストをてみるのだ。例えば、次のようなTwitterのTLを取得するAPIへアクセスするスクリプトを、このブログに埋め込んで実行したとする。
<pre lang="javascript">var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function(){
    if (xhr.readyState === 4)	console.log(xhr.responseText);
};
xhr.open("GET",	"http://api.twitter.com/1/statuses/user_timeline.json?screen_name=h_demon", true);
xhr.send();</pre>
すると、コンソールにはこう表示される（Chromeの場合）。
<blockquote>XMLHttpRequest cannot load http://search.twitter.com/search.json?q=h_demon&amp;amp;amp;callback=?. Origin http://hdemon.net is <strong>not allowed by Access-Control-Allow-Origin. </strong></blockquote>
「あなたのドメインは、Access-Control-Allow-Originによって許可されていないよ」と出る。Chromeのコンソールからやっても同じ。しかし、プロトコル監視ツールを使ってリクエストとレスポンスを見てみると、
<blockquote>GET http://search.twitter.com/search.json?q=h_demon&amp;callback=? HTTP/1.1
Host: search.twitter.com
Connection: keep-alive
Referer: http://hdemon.net/
<strong>Origin: http://hdemon.net</strong>
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.68 Safari/534.24
Accept: */*
HTTP/1.1 200 OK
Server: hi
Status: 200 OK
Content-Type: application/json; charset=utf-8
Connection: close
<strong>{"results":[{"from_user_id_str":"12345678","profile_image_url":.... </strong></blockquote>
…と、このようにちゃんと欲しいデータは返ってきている。ただし、リクエストヘッダにOriginヘッダが付いており、またAccess-Control-Allow-Originヘッダが無いため、ブラウザが検閲を行ってデータをユーザに渡さないのだと思われる。ちなみに、JSONPを使ってTLを取得したときは、
<pre lang="javascript">
<script type="application/javascript" src="http://api.twitter.com/1/statuses/user_timeline.json?screen_name=h_demon&count=3&callback=callback"></script>
function callback(json){
    alert(json);    
}
</pre>
<blockquote>GET http://search.twitter.com/search.json?callback=jQuery....&amp;q=jquery&amp;_=1306207289145 HTTP/1.1
Host: search.twitter.com
Connection: keep-alive
Referer: http://hdemon.net/
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.68 Safari/534.24
Accept: */*
Accept-Encoding: gzip,deflate,sdch
Accept-Language: ja,en;q=0.8
Accept-Charset: Shift_JIS,utf-8;q=0.7,*;q=0.3</blockquote>
このようなリクエストヘッダになり、Originヘッダは付いていないことが分かる。

ところで、
<pre lang="javascript">var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function(){
    alert(xhr.readyState);
};
xhr.open("GET",	"http://api.twitter.com/1/statuses/user_timeline.json?screen_name=h_demon", true);
xhr.send();</pre>
こういうスクリプトではブラウザ毎に違いが生まれて、上手く検証できなかった。Chromeでは１→４を返し、Firefox4では１→２→４を返すのだが、ヘッダもボディも受信は完了しているのだから１→２→３→４となってもいいはず。Firefoxはレス受信→readyStateを2に更新→ヘッダ解析→readyStateを3に更新→ボディ解析のようなアルゴリズムで、Chromeはレス受信→ヘッダ解析→readyStateを2に更新→…という順序だということだろうか。確かに仕様書を読むと、そこらへんの順序まで厳密に規定されてはいない様子。
<h1>制限すべき通信かどうかを、ブラウザはいつどうやって判断してるの？</h1>
しかし、どうしてJSONPはクロスドメイン可能で、XMLHttpRequestはダメなんだろうか。ブラウザ内部でクロスドメインの許可不許可を決定するパラメータがあるんじゃないか。だって、そもそもJSONPは広義のクロスドメイン通信であるのにも関わらず、リクエストにはOriginヘッダが付いておらず、またレスポンスにもAccess-Control-Allow-Originヘッダは付いていない。そうでありながら、通信は問題なく行われているわけだから。
そこでCORSの仕様書を読み進めると、理由にあたる文章は見つけられなかったが、このような記載があった。
<blockquote><strong>3.1. Origin and Base URL</strong>
Each XMLHttpRequest object has an associated XMLHttpRequest origin and an XMLHttpRequest base URL.

<strong>3.6.8. The send() method</strong>
 If the XMLHttpRequest origin and the request URL are same origin ...These are the same-origin request steps.
 <strong>Otherwise These are the cross-origin request steps. </strong></blockquote>
つまり、<strong>制約すべき「クロスドメイン通信」かどうかは、XMLHttpRequestのsendメソッドが呼ばれた時点で判断しているらしい。</strong>
 そして、とりあえずリクエストを送ってから上述のヘッダで判断するのではなく、originパラメータによって、リクエストする前にここで言うところの"cross-origin"か否かを判断しているらしい。"cross-origin"と認定されると、Access-Control-Requestヘッダ群を生成するために必要ないくつかのパラメータをcross-originプロセスへ渡すようだ。
そして、このルールがscriptタグについても課せられるという記述はない。ただ、＜script type="text/javascript"＞
タグがJSONPに利用できると明記した箇所も今のところ見つかっていない。どちらも私が斜め読みした限りだが（参考：<a href="http://www.w3.org/TR/html5/scripting-1.html#scripting-1">HTML5仕様書scriptタグ部分</a>）。</script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date>2011-05-25 00:47:21</wp:post_date>
		<wp:post_date_gmt>2011-05-24 15:47:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%82%af%e3%83%ad%e3%82%b9%e3%83%89%e3%83%a1%e3%82%a4%e3%83%b3%e9%80%9a%e4%bf%a1%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6%e3%80%81%e4%bb%95%e6%a7%98%e6%9b%b8%e3%82%92%e8%aa%ad%e3%81%bf%e3%81%aa%e3%81%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[Network]]></category>
		<category domain="post_tag" nicename="%e4%bb%95%e6%a7%98"><![CDATA[仕様]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScriptの&quot;this&quot;をめぐる冒険</title>
		<link>http://hdemon.net/archives/727</link>
		<pubDate>Mon, 30 May 2011 06:42:07 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=727</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span" style="color: #999999; line-height: 19px; font-size: small;"> 2011/7/12　大部分を書き直す。</span>

&nbsp;

<strong><span style="color: #ff6600;">注意：以下の記事は私の勉強の過程を綴っただけなので、断定調に書かれている部分であっても、その正しさは全く担保されません。誤りがあれば指摘して下さると嬉しいです。</span></strong>

<span style="color: #888888; font-size: x-small;"><span class="Apple-style-span" style="line-height: 19px;">
</span></span>

JavaScriptの"this"の難しさは、「thisが書かれているオブジェクトを指すだろう」という素朴な解釈とは異なる原理で動作する点にあると思います。

結論を言えば、「ある関数が、obj.method();という形で特定のオブジェクトのプロパティとして呼び出されたとき、関数内部のthisはその親オブジェクトを指す」事が分かれば実用上問題ないと思うのですが、個人的にすっきりしないので、その原理を徹底的に解析しようというのが今回の記事の主旨です。

なお、記事中の仕様書は全てECMAScript 5thのものです。また、文中の引用文章は読みやすさを考慮して適宜改行、強調を行っています。

参考：　<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">ECMAScript 5th 仕様書</a>
<h1>thisとは何か。</h1>
まずは仕様書です。
<blockquote><strong>ECMA-262 5th</strong>
11.1.1 The this Keyword
The this keyword evaluates to the value of the ThisBinding of the current execution context.</blockquote>
「thisは現在のexecution contextのthis/ThisBindingの値を返す」という事でしょうか。これだけじゃなんとも言えませんが、
<ul>
	<li>execution contextと呼ばれる何かがある。</li>
	<li>execution contextは、currentという言葉から分かるように、移り変わるものである。</li>
	<li>execution contextには、thisの値を決定するようなパラメータがある。</li>
</ul>
という事は分かりました。では、execution contextは何と定義されているのか。
<h1>execution contextを理解しないと始まらない</h1>
<blockquote><strong>10.3 Execution Contexts</strong>
When control is transferred to ECMAScript executable code, control is entering an execution context.
<p style="padding-left: 30px;"><span style="color: #000080;">コントロールがexecutable codeに移るとき、コントロールはexecution contextに入る。</span></p>
Active execution contexts logically form a stack. The top execution context on this logical stack is the running execution context.
<p style="padding-left: 30px;"><span style="color: #000080;">アクティブなexecution contextsは、論理的なスタックである。この論理的スタックの一番上にあるexecution contextsが、実行中のexecution contextsである。</span></p>
A new execution context is created whenever control is transferred from the executable code associated with the currently running execution context to executable code that is not associated with that execution context.
<p style="padding-left: 30px;"><span style="color: #000080;">現在実行中のexecution contextに結び付けられたexecutable codeから、（実行中の）execution contextに結び付けられていないexecution codeにコントロールが移るときに、新しいexecution contextが作られる。</span></p>
The newly created execution context is pushed onto the stack and becomes the running execution context.
<p style="padding-left: 30px;"><span style="color: #000080;">新しく作られたexecution contextはスタックに</span><span class="Apple-style-span" style="color: #000080;">pushされ、それが実行中のexecution contextとなる。</span></p>
</blockquote>
なるほど。少し強引に解釈すると、
<ul>
	<li>JavaScriptエンジンがコードを実行し始めたときに、同時にexecutable contextが作成される。</li>
	<li>コードは全てが連続しているわけではなく、何らかの基準で分けられている。そして、そのコードが切り替わるたびにexecutable contextも新しくなる。</li>
	<li>しかし、コードの切り替えは、前のコードを捨てるような形では行われない。本を上に積んでいくように貯められ、一番上に積まれているものから処理されていくる。</li>
</ul>
ということでしょうか。5thはこの後より詳しく論じているので、もう少し続けてみます。
<h1>execution contextが、thisの値を決めるパラメータを持っている。</h1>
<blockquote>An execution context contains whatever state is necessary to track the execution progress of its associated code. In addition, each execution context has the state components listed in Table 19.
<p style="padding-left: 30px;"><span style="color: #000080;">execution contextには、それに結び付けられたコードが実行の経過を追うために必要な状態のすべてが含まれている。加えて、個々のexecution contextは以下の状態を保持している。</span></p>
<p style="text-align: left;"><strong>Table 19 —Execution Context State Components</strong>
<strong>LexicalEnvironment</strong> Identifies the Lexical Environment used to resolve identifier references made by code within this execution context.
<span style="color: #000000;"><strong>...
</strong></span> <strong>ThisBinding</strong> The value associated with the this keyword within ECMAScript code associated with this execution context.</p>
<p style="padding-left: 30px;"><span style="color: #000080;">このexecution contextに結び付けられたECMAScript中のthisの語句に結び付けられる。</span></p>
<strong>10.4 Establishing an Execution Context</strong>
When control enters an execution context, the execution context’s ThisBinding is set...
<p style="padding-left: 30px;"><span style="color: #000080;">コントロールがexecution contextに入るとき、ThisBindingが設定される。</span></p>
</blockquote>
execution contextが内部的にthisの値を定めるパラメータを持っており、それはexecution contextが立ち上がる時に定められ、かつその内容決定の仕組みはコードの種類によって変わりうるということですね。でも、その仕組みについてはまだ書いてありません。もう少し読み進める必要がありますが、その前に一旦まとめてみます。
<ul>
	<li>execution contextとは、コードごとに固有に存在する「説明書」のようなものであり、thisの内容のほか、スコープの情報や変数の情報が記されている。</li>
	<li>コード中でthisが呼ばれたとき、コードは自分のexecution contextに書かれたthisの指定先を調べる。</li>
	<li>このパラメータはexecution contextが作られたとき＝コードの実行順序が自分に回ってきたときに決定されるが、その決定方法は<span style="color: #333333;"><strong>コードの種類によって異なるらしい。</strong></span></li>
</ul>
では次に、具体的なコードの種類と、それぞれのthisの決め方を調べていきます。
<h1>executable codeは３種類ある。</h1>
<blockquote><strong>10.1 Types of Executable Code</strong>
There are three types of ECMAScript executable code:
<strong>Global code</strong> is source text that is treated as an ECMAScript Program. The global code of a particular Program does not include any source text that is parsed as part of a FunctionBody.
<p style="padding-left: 30px;"><span style="color: #000080;">グローバルコードはECMAScriptプログラムとして扱われる。ある特定のプログラムのグローバルコードは、FunctionBodyと解釈できるソースを含まない。</span></p>
<strong>Eval code</strong> ...

<strong>Function code</strong> is source text that is parsed as part of a FunctionBody.
The function code of a particular FunctionBody does not include any source text that is parsed as part of a nested FunctionBody.
<p style="padding-left: 30px;"><span style="color: #000080;">関数コードは、FunctionBodyを成すものと解釈されるソースである。ある特定のFunctionBodyの関数コードは、FunctionBodyを入れ子として含むことはない。</span></p>
...</blockquote>
コードにはGlobal / Eval / Function の３つの種類があります。
ただ、Globalとは定義上「FunctionBodyを含まないコード」であり、Evalはeval関数を使った際の例外的なコードであるということから、最後のFunction codeの理解が重要になるように思われます（Evalの読解は長くなりそうなので、今回は取り上げません）。
ちなみに、Global codeと認定された場合は、
<blockquote><strong>10.4.1 Entering Global Code</strong>
...

<strong>10.4.1.1 Initial Global Execution Context</strong>
The following steps are performed to initialize a global execution context for ECMAScript code C:
...
3.Set the ThisBinding to the global object.</blockquote>
というように、分かりやすくglobal objectが代入されるようです（ただ、global objectが入れられるパターンは後述するように他にもあります）。
次に、Function codeの定義を見てみます。
<h1>Function codeの場合の、thisを決定する仕組み</h1>
<blockquote><strong>10.4.3 Entering Function Code</strong>
The following steps are performed when control enters the execution context for function code contained in function object F, a caller provided thisArg, and a caller provided argumentsList:
<p style="padding-left: 30px;"><span style="color: #000080;"> 次の手順は、関数オブジェクトが含むFunction codeのexecution contextにコントロールが写ったときに実行され、呼び出し元はthisArgとargumentsListを渡す。</span></p>
1.If the function code is strict code, set the ThisBinding to thisArg.
<p style="padding-left: 30px;"><span style="color: #000080;"> strictなら（="use strict";使用時）、ThisBindingにthisArgを入れる。</span></p>
2.Else if thisArg is null or undefined, set the ThisBinding to the global object.
<p style="padding-left: 30px;"><span style="color: #000080;">thisArgがnullもしくはundefinedの場合、ThisBindingにはglobal objectを入れる。</span></p>
3.Else if Type(thisArg) is not Object, set the ThisBinding to ToObject(thisArg).
<p style="padding-left: 30px;"><span style="color: #000080;"> thisArgがオブジェクトではないときは、ToObject(thisArg)の値を入れる。</span></p>
4.Else set the ThisBinding to thisArg.
...</blockquote>
おさらいですが、thisが直接的に参照するのはexecution context内のThisBindingです。ここにはthisArgをどんな場合にThisBindingに設定するかということしか書いていませんが、thisArgは呼び出し側が提供するものだ、とも書かれています。ということは、呼び出し側のロジックを見てみなければなりません。
<h1>thisを直接決めるのは一体誰か。</h1>
では、関数呼び出し時の内部処理について見てみましょう。
<blockquote><strong>11.2.3 Function Calls</strong>
The production CallExpression : MemberExpression Arguments is evaluated as follows:
<p style="padding-left: 30px;"><span style="color: #000080;">"MemberExpression" "Arguments"の形式をとり、全体として"CallExpression"だと解釈できる構文は、次のように評価される。</span></p>
1.Let ref be the result of evaluating MemberExpression.
<p style="padding-left: 30px;"><span style="color: #000080;"> refに、MemberExpressionを評価した結果を入れる。</span></p>
...

6.If Type(ref) is Reference, then
<p style="padding-left: 30px;"><span style="color: #000080;">refがReference型である場合、</span></p>
<p style="padding-left: 30px;">a.If IsPropertyReference(ref) is true, then</p>
<p style="padding-left: 60px;"><span style="color: #000080;">refのbase valueがundefinedもしくはEnvironment Record以外なら、</span></p>
<p style="padding-left: 60px;">i.Let thisValue be GetBase(ref).</p>
<p style="padding-left: 90px;"><span style="color: #000080;">base valueの参照を返す。</span></p>
<p style="padding-left: 30px;">b.Else, the base of ref is an Environment Record</p>
<p style="padding-left: 60px;"><span style="color: #000080;">そうでなければ、</span></p>
<p style="padding-left: 60px;">i.Let thisValue be the result of calling the ImplicitThisValue concrete method of GetBase(ref).</p>
<p style="padding-left: 90px;"><span style="color: #000080;">thisの暗黙値=大抵はundefinedをthisValueとする。</span></p>
7.Else, Type(ref) is not Reference.
<p style="padding-left: 30px;"><span style="color: #000080;">refがReference型でなければ、</span></p>
<p style="padding-left: 30px;">a.Let thisValue be undefined.</p>
<p style="padding-left: 60px;"><span style="color: #000080;">thisValueにundefinedを設定する。</span></p>
...</blockquote>
上から見ていきましょう。まず、CallExpression : MemberExpression Argumentsとは何なのか。11.2はこのように表記されています。
<blockquote><strong>11.2 Left-Hand-Side Expressions</strong>
Syntax
MemberExpression :
<p style="padding-left: 30px;">PrimaryExpression
FunctionExpression
MemberExpression [ Expression ]
MemberExpression.IdentifierName
new MemberExpression Arguments</p>
...
CallExpression :
<p style="padding-left: 30px;"><strong>MemberExpression Arguments</strong>
CallExpression Arguments
CallExpression [ Expression ]
CallExpression.IdentifierName</p>
Arguments :
<p style="padding-left: 30px;">( )
( ArgumentList )</p>
</blockquote>
記法の勉強をしていないので感覚的な解釈ですが、11.2.3の"CallExpression : MemberExpression Arguments"は、CallExpressionの類型の一つを示しているようですね。ただ、CallExpressionのその他の類型は全てCallExpression自身を含んでいるので、最終的には"MebmerExpression + Arguments"の構文に還元されるのだと思います。例えば、
<blockquote>foo(10).bar();</blockquote>
のようなチェーンメソッドがあれば、
<blockquote>
<table border="0">
<tbody>
<tr>
<td>foo(10)</td>
<td>CallExpression</td>
</tr>
<tr>
<td>.bar</td>
<td>.IdentifierName</td>
</tr>
<tr>
<td>()</td>
<td>Arguments</td>
</tr>
</tbody>
</table>
</blockquote>
直接的には上の様になりますが、
<blockquote>
<table border="0">
<tbody>
<tr>
<td>foo</td>
<td>MemberExpression</td>
</tr>
<tr>
<td>(10)</td>
<td>Arguments</td>
</tr>
<tr>
<td>bar</td>
<td>MemberExpression</td>
</tr>
<tr>
<td>()</td>
<td>Arguments</td>
</tr>
</tbody>
</table>
</blockquote>
最終的にはこの形に分解して解釈するということでしょう。詳細は次の章で見ていきます。

話をFunction Callsに戻します。以上から、1.におけるMemberExpressionとは実行演算子()を外した関数名の部分だと言う事が分かります。関数名を評価するということは、
<pre lang="javascript" escaped="true">function bar(){};
 var foo = bar;</pre>
と処理をすることと（恐らく）同義ですから、refには関数の参照が入ります。
次に、2.で参照refを内部関数GetValueで処理します。GetValueだけで今回の記事と同じぐらいの説明が要りそうなので、立ち入った説明はしません（し、僕もよくわかってません）が、その名のとおり入れられた参照先の具体的な値を返します（8.7.1参照）。

3.は引数関係なので飛ばします。4.で先ほど処理した型を判別し、Objectでなければエラーを返します。関数の参照を持っていない変数に括弧を付けて、あたかも関数であるかのように実行したときの文法エラーを出すためのフィルターと考えるべきでしょう。5.も同様のフィルターと思われます。

さて、6からが重要な部分です。もう一度引用します。
<blockquote>6.If Type(ref) is Reference, then
<p style="padding-left: 30px;">a.If IsPropertyReference(ref) is true, then</p>
<p style="padding-left: 60px;">i.Let thisValue be GetBase(ref).</p>
<p style="padding-left: 30px;">b.Else, the base of ref is an Environment Record</p>
<p style="padding-left: 60px;">i.Let thisValue be the result of calling the ImplicitThisValue concrete method of GetBase(ref).</p>
7.Else, Type(ref) is not Reference.
<p style="padding-left: 30px;">a.Let thisValue be undefined.</p>
</blockquote>
6と7によれば、
<blockquote>1. Type(ref) が Reference かつ、IsPropertyReference(ref) が真のとき、thisValue は GetBase(ref)の値
2. Type(ref) が Reference かつ、IsPropertyReference(ref) が真でなく、refがEnviroment Recordであるとき、thisValue は GetBase(ref)　InplicitThisValueの値。
3. Type(ref) が Reference ではないとき、thisValue は undefined</blockquote>
という場合分けができます。とうとう核心部分までやって来ましたね。まず、Type(ref)ですが、これは単純にrefの型を返す内部関数です（8を参照）。

refがどのような値を持っているかは、MemberExpressionの形態によって決定されますから、それぞれの場合の仕様書の表記を見てみないといけません。次の項目では、この三類型が、我々がいつも行っている関数呼び出しのどの類型にあたるのかを検討します。
<h1>我々はいつも、どんなやり方で関数を呼び出しているか。</h1>
<pre lang="javascript">var obj = {};

(function(){
	obj.method = function(){
		console.log(this); // obj
		function closure (){
			console.log(this); // global
		}
		closure();
	};
	obj.method();
	console.log(this); // global
}());

console.log(this); // global
//全て non-strict modeの場合。</pre>
たぶん、次の３つが主なパターンではないでしょうか。
<ol>
	<li>スコープチェーン上にある関数名を指定して呼び出す。</li>
	<li>あるオブジェクトのプロパティである関数を、object.method()の形で呼び出す。</li>
	<li>即時関数として呼び出す。</li>
</ol>
上の例の場合、method直下で呼び出した=2.のパターン以外のthisは、全てglobal(strict modeならundefined)を指します。closure下は新しいexecution contextに移っていますから、そのthisの内容を決定しているのは"closure();"の評価結果です。即時関数の場合も、「内部にFunction codeを含まないcode」として、"(function(){}());"の部分の評価結果のみに、thisの値は依存していると考えられます。

これらの構文を解析してみます。まず、closure直下で呼ぶ場合はどうでしょうか。この場合は、
<blockquote>
<table border="0">
<tbody>
<tr>
<td>closure</td>
<td>MemberExpression : PrimaryExpression : Identifier</td>
</tr>
<tr>
<td> ()</td>
<td>Arguments : ()</td>
</tr>
</tbody>
</table>
</blockquote>
となるのではないかと思います。そしてmethod直下で呼び出す場合は、
<blockquote>
<table border="0">
<tbody>
<tr>
<td>obj</td>
<td>MemberExpression :
PrimaryExpression :
Identifier</td>
<td rowspan="3">MemberExpression :
MemberExpression
.IdentifierName</td>
</tr>
<tr>
<td>.</td>
<td></td>
</tr>
<tr>
<td> method</td>
<td>?</td>
</tr>
<tr>
<td> ()</td>
<td colspan="2">Arguments : ()</td>
</tr>
</tbody>
</table>
</blockquote>
と解釈できるのではないでしょうか。この類型の場合は、類型として仕様上に明記されていることから、Identifierではなく、MemberExpression .IdentifierNameとして解析されると思われます。

最後に即時関数の場合。
<blockquote>
<table border="0">
<tbody>
<tr>
<td>外側の()を含めた全体</td>
<td>PrimaryExpression : ( Expression )</td>
</tr>
<tr>
<td>function(){}</td>
<td>Expression : MemberExpression :
FunctionExpression</td>
</tr>
<tr>
<td>functionの後ろの()</td>
<td>Arguments : ()</td>
</tr>
</tbody>
</table>
</blockquote>
これらを整理すると、
<ol>
	<li>スコープチェーン上にある関数名を指定して呼び出すパターン</li>
<ul>
	<li>Identifier</li>
</ul>
	<li>あるオブジェクトのプロパティである関数を、object.method()の形で呼び出す。</li>
<ul>
	<li>MemberExpression .IdentifierName</li>
</ul>
	<li>即時関数として呼び出すパターン</li>
<ul>
	<li>FunctionExpression</li>
</ul>
</ol>
をそれぞれ評価した値を調べれば、先の分岐に当てはめることができるはずです。

まずは1.のIdentifierのパターンから見ていきます。
<h1>Identifierを評価すると、何が返ってくるのか。</h1>
Identifierを評価するとき、
<blockquote><strong>11.1.2 Identifier Reference</strong>
An Identifier is evaluated by performing Identifier Resolution as specified in 10.3.1. The result of evaluating an
Identifier is <strong>always a value of type Reference.</strong>
<p style="padding-left: 30px;"><span style="color: #000080;">識別子を評価した結果は、常にReference型である。</span></p>
</blockquote>
というルールが存在します。Reference型とは、
<blockquote>A Reference is a resolved name binding. A Reference consists of three components, the base value, the referenced name and the Boolean valued strict reference flag. The base value is either undefined, an Object, a Boolean, a String, a Number, or an environment record (10.2.1). A base value of undefined indicates that the reference could not be resolved to a binding. The referenced name is a String.
<p style="padding-left: 30px;"><span style="color: #000080;">Referenceは名前束縛を解決した結果である。Referenceは base value, referenced name, strict reference flagの3つの要素からなる。<strong>base valueはundefined, Object, Boolean, String, Number, enviroment recordのいずれかである。</strong>base valueがundefinedの場合、それは参照が束縛を解決できなかった事を意味する。referenced nameはString型である。</span></p>
</blockquote>
とあるように、識別子の名前解決のための型のようです。あるいは特別なラッパーオブジェクトと言ってもいいかも知れません。これによれば、Reference型だがbase valueはObject型ということがあり得ますし、その場合Type(ref)の結果はObjectではなくReferenceになります。

さらに、Identifierの名前解決を行うとき、GetIdentifierReferenceという内部関数が呼ばれます。GetIdentifierReferenceはexecution contextの持つスコープ情報である Lexical Environmentを参照し、再帰的に該当する識別子を探します。
<blockquote><strong>10.3.1 Identifier Resolution</strong>
Identifier resolution is the process of determining the binding of an Identifier using the LexicalEnvironment of the running execution context. During execution of ECMAScript code, the syntactic production PrimaryExpression : Identifier is evaluated using the following algorithm:
<p style="padding-left: 30px;"><span style="color: #000080;">識別子解決は、実行中のexecution contextのLexicalEnvironmentを使用し、識別子束縛を決定するプロセスである。ECMAScriptコード実行中、PrimaryExpression : Identifierにあたる構文上の生成物は次のアルゴリズムによって評価される。</span></p>
1. Let env be the running execution context‘s LexicalEnvironment.
<p style="padding-left: 30px;"><span style="color: #000080;">実行中のexecution contextのLexicalEnvironmentをenvに入れる。</span></p>
...

3. Return the result of calling GetIdentifierReference function passing env, Identifier, and strict as arguments.
The result of evaluating an identifier is always a value of type Reference with its referenced name component equal to the Identifier String
<p style="padding-left: 30px;"><span style="color: #000080;">GetIdentifierReferenceにenvを与えた結果を返す。識別子を評価したこの結果は常にReference型であり、そのreferenced nameは識別子の文字列に等しい。</span></p>
</blockquote>
このとき、GetIdentifierReferenceは特定オブジェクトへの参照ではなく、 Environment Recordsをbase valueに入れて返します。
<blockquote><strong>10.2.2.1 GetIdentifierReference (lex, name, strict)</strong>
The abstract operation GetIdentifierReference is called with a Lexical Environment lex, an identifier String
name, and a Boolean flag strict. The value of lex may be null. When called, the following steps are performed:
1. If lex is the value null, then
<p style="padding-left: 30px;">a. <strong>Return a value of type Reference whose base value is undefined</strong>, whose referenced name is name,
and whose strict mode flag is strict.</p>
2. <strong>Let envRec be lex‘s environment record.</strong>
3. Let exists be the result of calling the HasBinding(N) concrete method of envRec passing name as the
argument N.
4. If exists is true, then
<p style="padding-left: 30px;">a. <strong>Return a value of type Reference whose base value is envRec</strong>, whose referenced name is name, and
whose strict mode flag is strict.</p>
5. Else
<p style="padding-left: 30px;">a. Let outer be the value of lex’s outer environment reference.</p>
<p style="padding-left: 30px;">b. <strong>Return the result of calling GetIdentifierReference passing outer, name</strong>, and strict as arguments</p>
</blockquote>
全てを追っていくと頭が痛くなるので、要点だけ見ると、GetIdentifierReferenceは、
<ul>
	<li>undefinedを返すパターン(1-a)、</li>
	<li>base valueがenvironment recordであるReference型を返すパターン(4-a)、</li>
	<li>再帰的に自分を呼び出すパターン(5-b)</li>
</ul>
<span class="Apple-style-span" style="font-size: 16px; color: #444444; font-family: Georgia, 'Bitstream Charter', serif; line-height: 24px;">があると分かります。</span><span class="Apple-style-span" style="font-size: 16px; color: #444444; font-family: Georgia, 'Bitstream Charter', serif; line-height: 24px;">つまり、Identiferを評価した時点で、undefinedかReference型のどちらかが返ってくることが確定し、結果として少なくともFunction Callの分岐6-aには該当しない事が確定します。</span>

そして、<strong>6-aに該当しないということは、ThisBindingの値はundefinedかImplicitThisValueのどちらかであることも確定します。</strong>ImplicitThisValueは
<blockquote><strong>10.2.1.2.6 ImplicitThisValue()</strong>
Object Environment Records return undefined as their ImplicitThisValue unless their provideThis flag is true.
<p style="padding-left: 30px;"><span style="color: #000080;">Object Evironment Recordsは、（そのプロパティである）provideThisがtrueで無い限り、「thisの暗黙値」としてundefinedを返す。</span></p>
1. Let envRec be the object environment record for which the method was invoked.
<p style="padding-left: 30px;"><span style="color: #000080;">envRecに、そのメソッドを呼び出したenvironment recordを入れる。</span></p>
2. If the provideThis flag of envRec is true, return the binding object for envRec.
<p style="padding-left: 30px;"><span style="color: #000080;">envRecのprovideThis がtrueなら、envRecに束縛されたオブジェクトを返す。</span></p>
3. Otherwise, return undefined
<p style="padding-left: 30px;"><span style="color: #000080;">そうでなければ、undefinedを返す。</span></p>
</blockquote>
というルールがあり、説明は省きますが、provideThisがtrueとなるのはWithを指定されたとき (( あと、ECMAScript 5thのbindメソッドもこれを使うのかも？ )) ぐらいらしいので、実用上の殆どの場合はundefinedが返ってくることになります。

まとめてみましょう。
<ul>
	<li>関数は関数宣言か、関数式を変数に代入する形で定義されるが、どちらも識別子を使って呼び出される。</li>
	<li>識別子を使って呼び出された場合、識別子を評価した結果はReference型である。 ((加えて、Identifierは常にGetIdenrifierReferenceを通して返されるということは、IdentifierのReference-&gt;base valueの値は常にenvironment record型という事になるはずです。))</li>
	<li>Reference型の場合、Thisの暗黙値はundefinedに設定される。 ((strict modeならundefined、そうでなければglobal objectを返すことになりますが、暗黙値にはそもそもundefiendが設定されていることから、「ECMAScript 5thのstrict modeでは、関数の識別子のみで関数を呼び出した場合にはundefinedを返す」というのは特別な処理ではなく、むしろ特別な例外処理を省いた結果だったということが分かります。（もっとも、strict modeが完全に実装されているブラウザは2011/7/12現在ではまだ少ないようで、Firefox 5ぐらいでしか確認できません）。))</li>
	<li>With文等の特殊な場合を除いて、暗黙値は変更されない。</li>
	<li>だから、この場合のthisはglobalもしくはundefinedになる。</li>
</ul>
やっと一つ答えが出ました。続いて2.のパターンを見てみます。
<h1><span class="Apple-style-span" style="color: #000000; font-size: 14px; line-height: 21px;">MemberExpression .IdentifierNameを評価すると何が返ってくるのか。</span></h1>
MemberExpression .IdentifierNameの類型は、直接仕様に記載されていません。しかし、
<blockquote>The dot notation is explained by the following <strong>syntactic conversion:</strong>
MemberExpression . IdentifierName
is <strong>identical in its behaviour</strong> to MemberExpression [  &lt;identifier-name-string  ]
...
<p style="padding-left: 30px;"><span style="color: #000080;">ドット表記は、次のようば構文的変換によって説明される。</span></p>
<p style="padding-left: 30px;"><span style="color: #000080;">"MemberExpression . IdentifierName"は、”MemberExpression [  &lt;identifier-name-string  ]"と全く同等にふるまう。</span></p>
</blockquote>
という事から、次のルールが適用されます。
<blockquote>The production MemberExpression : MemberExpression [ Expression ] is evaluated as follows:
1. <strong>Let baseReference be the result of evaluating MemberExpression.</strong>
<p style="padding-left: 30px;"><strong></strong><span style="color: #000080;">baseReferenceに、MemberExpressionを評価した値を入れる。</span></p>
2. <strong>Let baseValue be GetValue(baseReference).</strong>
<p style="padding-left: 30px;"><strong></strong><span style="color: #000080;">baseValueに、GetValue(baseReference)の戻り値を入れる。</span></p>
...
8. <strong>Return a value of type Reference whose base value is baseValue</strong> and whose referenced name is
propertyNameString, and whose strict mode flag is strict.
<p style="padding-left: 30px;"><span style="color: #000080;">base valueにbaseValueを入れたReference型の値を返す。</span><span class="Apple-style-span" style="font-style: normal;"> </span></p>
</blockquote>
GetValue自体も大変ややこしいロジックなのですが、結局ははいくつかの例外処理を除き、参照先の値を返すだけだと思われます。そうすると、関数呼び出しという前提を置くなら、MemberExpression [ Expression ]を評価した場合はbase valueにある関数オブジェクトへの参照を持つReference型が返ってくることになります。

この場合、IsPropertyReference(type Object) === true となり、<strong>Function Callにおける分岐の6-aに該当し、</strong>ThisBindingにはMemberExpression [ Expression ]のMemberExpression部分、すなわちobj.method();ならobjへの参照が代入される事になります。

まとめます。
<ul>
	<li>obj.method();という関数の呼び出し方は、obj["method"]()とする場合と、構文解釈上は全く同じに扱われる。</li>
	<li>この場合、objへの参照がそのままThisBindingに代入され、thisはobjを指すことになる。</li>
	<li>"obj"自体はIdentifierであるが、Identifierを評価した値そのものがThisBindingに代入されない点が、前項の場合と異なる。</li>
</ul>
<h1><span class="Apple-style-span" style="color: #000000; font-size: 14px; line-height: 21px;">即時関数を評価すると何が返ってくるのか。</span></h1>
即時関数、つまり
<pre lang="javascript">(function(){

}());</pre>
この慣用表現の構文をもう一度掲載すると、
<blockquote>
<table border="0">
<tbody>
<tr>
<td>外側の()</td>
<td>PrimaryExpression : ( Expression )</td>
</tr>
<tr>
<td>function(){}</td>
<td>MemberExpression : FunctionExpression</td>
</tr>
<tr>
<td>functionの後ろの()</td>
<td>Arguments : ()</td>
</tr>
</tbody>
</table>
</blockquote>
こうなると思われます。これは先の二類型と違ってIdentifierが関係しません。( Expression )を評価すると、自動的にExpressionを評価する事になるだけ(11.1.6参照)なので、FunctionExpressionの評価のみが問題となります。
<blockquote><strong>FunctionExpression : function ( FormalParameterListopt ) { FunctionBody }</strong>
is evaluated as follows:
...

<strong>13.2 Creating Function Objects</strong>
...
1. Create a new native ECMAScript object and <strong>let F be that object.</strong>

...

20. <strong>Return F.</strong></blockquote>
FunctionExpressionを評価すると、以上のルールに従い、Object型の値が戻ってくるようです。つまり<strong>Reference型+base valueがObject型という事ではなく、単なるObject型になると思われます。</strong>この解釈が正しければ、<strong>7.に該当し、</strong>undefinedがThisBindingに代入されます。その後は前項と一緒です。

まとめます。
<ul>
	<li>即時関数の外側の括弧は、関数呼び出しについて言えば、中身の評価に影響を及ぼさない。</li>
	<li>FunctionExpressionを評価すると、直接Object型の値が返ってくる。</li>
	<li>Object型の値が返ってきた場合、Function Callの過程はThisBindingにundefinedを代入する。</li>
	<li>だから、即時関数の直下ではthisはundefinedもしくはglobalになる。</li>
</ul>
<h1> <span class="Apple-style-span" style="color: #000000; font-size: 14px; line-height: 21px;">簡単な総括</span></h1>
以下のルールで、大体の説明ができると思います。
<blockquote><strong>11.2.3 Function Calls</strong>
The production CallExpression : MemberExpression Arguments is evaluated as follows:
<p style="padding-left: 30px;"><span style="color: #000080;">"MemberExpression" "Arguments"の形式をとり、全体として"CallExpression"だと解釈できる構文は、次のように評価される。</span></p>
1.Let ref be the result of evaluating MemberExpression.
<p style="padding-left: 30px;"><span style="color: #000080;"> refに、MemberExpressionを評価した結果を入れる。</span></p>
...

6.If Type(ref) is Reference, then
<p style="padding-left: 30px;"><span style="color: #000080;">refがReference型である場合、</span></p>
<p style="padding-left: 30px;">a.If IsPropertyReference(ref) is true, then</p>
<p style="padding-left: 60px;"><span style="color: #000080;">refのbase valueがundefinedもしくはEnvironment Record以外なら、</span></p>
<p style="padding-left: 60px;">i.Let thisValue be GetBase(ref).</p>
<p style="padding-left: 90px;"><span style="color: #000080;">base valueの参照を返す。</span></p>
<p style="padding-left: 30px;">b.Else, the base of ref is an Environment Record</p>
<p style="padding-left: 60px;"><span style="color: #000080;">そうでなければ、</span></p>
<p style="padding-left: 60px;">i.Let thisValue be the result of calling the ImplicitThisValue concrete method of GetBase(ref).</p>
<p style="padding-left: 90px;"><span style="color: #000080;">thisの暗黙値=大抵はundefinedをthisValueとする。</span></p>
7.Else, Type(ref) is not Reference.
<p style="padding-left: 30px;"><span style="color: #000080;">refがReference型でなければ、</span></p>
<p style="padding-left: 30px;">a.Let thisValue be undefined.</p>
<p style="padding-left: 60px;"><span style="color: #000080;">thisValueにundefinedを設定する。</span></p>
...</blockquote>
<ul>
	<li>Identifierを評価すると、base valueにEnvironment Recordsが入ったReference型が返ってくる。</li>
	<li> MemberExpression : MemberExpression [ Expression ] を評価すると、base valueにMemberExpressionへの参照が入ったReference型が返ってくる。</li>
	<li>FunctionExpressionを評価すると、Object型（そのFunctionへの参照）が返ってくる。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>727</wp:post_id>
		<wp:post_date>2011-05-30 15:42:07</wp:post_date>
		<wp:post_date_gmt>2011-05-30 06:42:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript%e3%81%aethis%e3%82%92%e3%82%81%e3%81%90%e3%82%8b%e5%86%92%e9%99%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="popular"><![CDATA[popular]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jQueryはイベント操作をどのように行っているのか</title>
		<link>http://hdemon.net/archives/768</link>
		<pubDate>Sat, 25 Jun 2011 18:30:58 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=768</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>addEventListenerの引数設定…煩わしくないですか？</h1>
addEventListenerを使い、さらにそのハンドラが参照する関数へデータを渡したい場合、
<ul>
	<li>addEventListenerを実行するコンテキストと、登録される側の関数の両方からアクセスできる変数やオブジェクトにデータを入れておく。</li>
	<li>無名関数を作り、その中で目的の関数を引数付きで呼び出す構造にする。</li>
</ul>
という方法があると思います。そして後者の場合、後でイベントトリガーを削除できるようにするために、その無名関数を何かに代入してからaddEventListenerに入れたりします。…僕はそうするんですが、皆さんはどうですか？　つまり、こういう感じです。
<pre lang="javascript">var handle = function(){
	func(val);
};
window.addEventListener("mousedown", handle);
// 消すとき 
window.removeEventListener("mousedown", handle);</pre>
でも、文法上の制限はどうしようもないとは言え、目的の大したことなさの割にはコードが技巧的で、あまり美しいとは思えない。さらに、あるオブジェクトに登録された異なるリスナーを「一括で」削除したい場合、
<pre lang="javascript">window.removeEventListener("mousedown");</pre>
というやり方ができないという点も気になります。それができれば、addEventListenerの中に直接無名関数を書けばいいのに。この引数省略の表記はエラーにはならないはずですが、何も意味を持たない命令です。

さて、世の中には同じように感じてくれる頭のいい人もいるもので、各種ライブラリではもっとシンプルかつ便利にリスナーの付け外しができるメソッドが提供されています。今回はその代表jQueryを題材に、どのような仕組みで簡便さを実現しているのかを解析してみたいと思います。
<h1>jQueryのイベント操作</h1>
その前に、まずjQueryのイベント関連の代表的な機能の紹介から。
<ul>
	<li>bindメソッドでイベント登録できるが、その際に引数を設定できる。引数は仮引数ではなく、event.dataを介して間接的に渡される。</li>
	<li>unbindメソッドの第2引数を省略することで、リスナー登録を全て消す事ができる。</li>
	<li>oneメソッドを使えば、1回限り有効なトリガーを設定できる。</li>
</ul>
こんな素晴らしい機能があります。これらをどういう風に実現しているかを調べるわけですが、予想を立ててみたいと思います。
<ul>
	<li>oneメソッドを実現するには、イベントが発生したことをjQuery自身が認識する必要がある。</li>
	<li>ということは、jQuery内部のプロキシ的な関数へハンドラを渡し、それを経由させイベント発生を検知して、自分自身でイベントを削除しているのではないか。</li>
	<li>unbindで全消去できる機能は、ハンドラを配列かなんかに貯めておいて、unbindの時にその配列を走査しremoveEventListenerを実行するのではないか。</li>
</ul>
<h1>bind / oneの仕組み</h1>
さて…どうでしょうか。早速コードを見てみましょう。 コアに検索をかけてみたところ、こういう箇所が見つかりました。bindとoneをイテレータで一括定義というところが、いきなり玄人っぽくてオシャレです。というか、この表記のせいで検索に苦労しました。
<pre lang="javascript">// jquery-1.6.1.js line 3395-
jQuery.each(["bind", "one"], function( i, name ) {
	// A
	jQuery.fn[ name ] = function( type, data, fn ) {
		var handler;

		// B
		// Handle object literals
		if ( typeof type === "object" ) {
			for ( var key in type ) {
				this[ name ](key, data, type[key], fn);
			}
			return this;
		}

		// C
		if ( arguments.length === 2 || data === false ) {
			fn = data;
			data = undefined;
		}

		// D
		if ( name === "one" ) {
			handler = function( event ) {
				jQuery( this ).unbind( event, handler );
				return fn.apply( this, arguments );
			};
			handler.guid = fn.guid || jQuery.guid++;
		} else {
			handler = fn;
		}

		// E
		if ( type === "unload" &amp;&amp; name !== "one" ) {
			this.one( type, data, fn );

		// F
		} else {
			for ( var i = 0, l = this.length; i &lt; l; i++ ) {
				jQuery.event.add( this[i], type, handler, data );
			}
		}

		return this;
	};
});</pre>
なお、A~Eは私が付けました。 A の".fn"はjQueryでは".prototype"のはず。そうしてみると、Dの部分以外はoneとbindで共通なんですね。 また、Bを見て、初めて複数登録ができる事を知りました。

Cは第2引数が無いときの処理。特に変わった点はありませんが、個人的には「JavaScriptで多重定義ってこうやれば簡潔なんだ」という良い見本になりました。

Dでは、one/bindどちらの場合も関数の参照をhandlerプロパティに代入するようですが、oneの場合は一度無名関数を作り、関数の冒頭でいきなり自分自身をunbindします。これで1回限りであることを保障するわけですね。その後引数を与えて実行します。

Eは、unload時は登録を一回限りにしようという分岐です。破棄するんだから自ずと1回限りじゃないかと思うんですが、こうしないとブラウザによってはメモリが開放されなかったりするんでしょうか。

最後にFでaddメソッドにほぼ全て丸投げしています。ということで、addメソッドも見てみましょう。長いので適宜省略しています。
<pre lang="javascript">// line 2511-
jQuery.event = {

	// Bind an event to an element
	// Original by Dean Edwards
	add: function( elem, types, handler, data ) {

		...

		var handleObjIn, handleObj;

		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
		}</pre>
この部分はちょっと分かりません。handlerが重層構造になる状況というのはどういう場合でしょうか。handlerが参照する関数内でさらにbindなどをすると重層構造になるんですかね。その場合、このロジックだと1層目の関数をスキップしてしまいそうですが、いいんでしょうか。
<pre lang="javascript">		// Make sure that the function being executed has a unique ID
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}</pre>
ここで再度guidが出てきますね。結局、oneでもbindでもユニークIDを割り振るようです。
<pre lang="javascript">		// Init the element's event structure
		var elemData = jQuery._data( elem );

		// If no elemData is found then we must be trying to bind to one of the
		// banned noData elements
		if ( !elemData ) {
			return;
		}</pre>
_dataはjQuery.dataと同じでした。つまり、elem = thisで示されるあるjQueryオブジェクトに関連付けられたデータを、ここで引き出すようです。そして、この後明らかになりますが、このデータ内にハンドラとかIDとかを詰め込んでいる様子です。これらのデータ/プロパティは、あるものについては$()セレクタで呼び出したときに自動的に付加され、その他はこの下で行われるように、参照を通じて納められるのではないでしょうか。
<pre lang="javascript">		var events = elemData.events,
			eventHandle = elemData.handle;

		if ( !events ) {
			elemData.events = events = {};
		}

		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &amp;&amp; (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.handle.apply( eventHandle.elem, arguments ) :
					undefined;
			};
		}</pre>
ここでeventHandleに仮引数のhandleを入れてますね。eventHandleは、この後addEventListenerに直接渡される変数です。
<pre lang="javascript">		// Add elem as a property of the handle function
		// This is to prevent a memory leak with non-native events in IE.
		eventHandle.elem = elem;

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = types.split(" ");

		var type, i = 0, namespaces;

		while ( (type = types[ i++ ]) ) {
			handleObj = handleObjIn ?
				jQuery.extend({}, handleObjIn) :
				{ handler: handler, data: data };</pre>
ここでhandleObjにbindの第2引数で指定するdataを入れてます。.extendはいわゆるディープコピーのはず。最後の最後にこのhandleObjが登場し、handlersという（恐らく）個々のjQueryオブジェクトに関連付けられる何かへの参照を保持する配列にpushされますから、これはaddメソッド内部のみで一時的な変更を加えて使うためコピーですね。
<pre lang="javascript">			...
			// Get the current list of functions bound to this event
			var handlers = events[ type ],
				special = jQuery.event.special[ type ] || {};</pre>
そのhandlersです。unbindの際に重要になりますが、イベントの種類ごとに分かれているようです。ここで整理すると、bind/one内のthis = elem、elemに関連付けられたオブジェクト = elemData、events / eventHandle = elemData内のプロパティです。elemDataは、上で見たように、_dataメソッドでDOMオブジェクトに関連付けられています。
<pre lang="javascript">			// Init the event handler queue
			if ( !handlers ) {
				handlers = events[ type ] = [];

				// Check for a special event handler
				// Only use addEventListener/attachEvent if the special
				// events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}</pre>
やっとaddEventListenerが出てきます。eventHandleは少し上で出てきました。elemData.handleを指しています。
<pre lang="javascript">			...
			// Add the function to the element's handler list
			handlers.push( handleObj );</pre>
ここで、handleObjをhandleObjに入れています。やはり最後は配列なんですね。handlersはeventsを、eventsはelemDataを参照しており、elemDataは個々のjQueryオブジェクト内のプロパティを参照しているのだと思われます。で、その中に、今回登録したhandleがあるわけです。
<pre lang="javascript">			// Keep track of which events have been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},</pre>
うーん、大変ややこしいですね。でもまあ、大体の構造は分かりました。「個々のjQueryオブジェクトは、自分に関連付けられるイベントの情報を自前で保存している」という点が重要だと思います。 次はunbindメソッドです。
<h1>unbindの仕組み</h1>
<pre lang="javascript">unbind: function( type, fn ) {
	// Handle object literals
	if ( typeof type === "object" &amp;&amp; !type.preventDefault ) {
		for ( var key in type ) {
			this.unbind(key, type[key]);
		}

	} else {
		for ( var i = 0, l = this.length; i &lt; l; i++ ) {
			jQuery.event.remove( this[i], type, fn );
		}
	}

	return this;
},</pre>
unbindもbindと基本構造は同じですね。さて、unbindが呼び出すremoveですが、bind以上に長いので、重要部分のみを抜粋します。
<pre lang="javascript">// line 2640 
// Detach an event or set of events from an element
remove: function( elem, types, handler, pos ) {

	var ret, type, fn, j, i = 0, all, namespaces, namespace, special, eventType, handleObj, origType,
		elemData = jQuery.hasData( elem ) &amp;&amp; jQuery._data( elem ),
		events = elemData &amp;&amp; elemData.events;

		...

		eventType = events[ type ];

		if ( !eventType ) {
			continue;
		}

		if ( !handler ) {
			for ( j = 0; j &lt; eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( all || namespace.test( handleObj.namespace ) ) {
					jQuery.event.remove( elem, origType, handleObj.handler, j );
					eventType.splice( j--, 1 );
				}
			}

			continue;
		}</pre>
addではhandlersがevents[ type ]を参照していましたから、removeでも同じだと考えると、eventType[ j ]とadd内のhandlerが対応すると考えてよさそうです。handlerが指定されていないで呼び出された場合、こうやってイベント登録の全消去を行うわけですね。 この後、removeEventというIE対策のラッパー関数を介してremoveEventListenerが呼び出されます。
<h1>まとめ</h1>
<ul>
	<li>jQueryでは、DOMオブジェクト毎に配列の形でハンドラを保管している。</li>
	<li>oneはややこしいことはしていない。単に無名関数でくるんで、まっさきにイベント登録を消した上で目的の関数を実行するだけ。</li>
	<li>unbindは保管したハンドラを利用して、イベント登録全消去機能を実現している。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>768</wp:post_id>
		<wp:post_date>2011-06-26 03:30:58</wp:post_date>
		<wp:post_date_gmt>2011-06-25 18:30:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jquery%e3%81%af%e3%82%a4%e3%83%99%e3%83%b3%e3%83%88%e6%93%8d%e4%bd%9c%e3%82%92%e3%81%a9%e3%81%ae%e3%82%88%e3%81%86%e3%81%ab%e8%a1%8c%e3%81%a3%e3%81%a6%e3%81%84%e3%82%8b%e3%81%ae%e3%81%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="category" nicename="popular"><![CDATA[popular]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Susannah]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>184.72.109.236</wp:comment_author_IP>
			<wp:comment_date>2011-08-11 05:42:11</wp:comment_date>
			<wp:comment_date_gmt>2011-08-10 20:42:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I suppose that sounds and semlls just about right.]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1313037200]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>prototypeはプロトタイプではないし、newを付けなくてもコンストラクタは動く。</title>
		<link>http://hdemon.net/archives/800</link>
		<pubDate>Tue, 12 Jul 2011 15:52:08 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=800</guid>
		<description></description>
		<content:encoded><![CDATA[以下、覚え書き。
<h1>prototypeはただのオブジェクトで、コンストラクタはただの関数。</h1>
<pre lang="javascript" escaped="true">function Obj() {}
Obj.prototype.prop = function() {
	alert();
}

var inst = new Obj;</pre>
こういうやり方をすれば、プロトタイプベースのJavaScriptにおいてもクラス／インスタンス的な機能を実現できると本には書いてある。しかし、prototypeもnewを付ける対象となるコンストラクタ関数も、内部的に特別な機能を与えられたものではない。確かに特別な働きをすることには違いないが、それは全てnewの働きである。コンストラクタとしてのfunctionは普通の関数宣言／式であり、
<pre lang="javascript" escaped="true">var inst = new Obj;
alert( inst.prototype );
// methodの表示を期待するが、結果はundefined</pre>
またprototypeはプロトタイプオブジェクトではない。
<h1>prototypeはオブジェクトの原型ではなく、プロトタイプオブジェクトの原型のようなもの。</h1>
Objがnewを付けて呼ばれるときに、コンストラクタはObj.prototypeを探す。そして、Obj.prototypeが参照するオブジェクトをObjのプロトタイプとしてコピーする。プロトタイプオブジェクトそのものを示すのは __proto__ であり、ECMAScriptの仕様上は内部プロパティである。ただ、ブラウザ側の独自実装として大抵は__proto__としてアクセスできる。だから、
<pre lang="javascript" escaped="true">function Obj() {}
Obj.prototype.method = function() {
	alert();
}

var inst = new Obj;
Obj.prototype === inst.__proto__ // true
Obj.prototype = null; // インスタンス生成後にprototypeを初期化しても、
inst.method(); // インスタンスに影響はない。</pre>
である。
<h1>「newを付けることで、関数がコンストラクタ化する」わけではない。</h1>
正確には、「newを付けなくても、コンストラクタとしての機能の一部は果たせる」
<pre lang="javascript" escaped="true">function Obj() {}
Obj.prototype.prop = 1;

var inst = Obj(); // new をはずす。
alert(inst.prop); // error</pre>
これは動かない。しかし、
<pre lang="javascript" escaped="true">function Obj() {
	var that = {};
	for ( prop in Obj.prototype ) { // 内容をコピーする
		that[prop] = Obj.prototype[prop];
	}
	return that;
}
Obj.prototype.prop = 1;

var inst = Obj(); // new をはずす。
alert(inst.prop); // 1</pre>
これは動く。このコードの「プロパティを複製する」という機能に限れば、コンストラクタ内の5行がnewの役割を代替している事になる。やっていることは、
<ul>
	<li>thatオブジェクトを作成し、</li>
	<li>Obj.prototypeの内容をthatへコピーし、 ((ここでvar that = Obj.prototypeとすると、参照を入れるだけなのでプロパティを共有してしまう。そこでいわゆるディープコピーをしなければならないが、今回は一階層しかないので簡易的なロジックにしている。 ))</li>
	<li>thatを戻り値として返す。</li>
</ul>
だけである。inst = Obj() = Obj.prototypeのコピーなのだから、inst.propに1が代入されているのは当然。また、
<pre lang="javascript" escaped="true">var inst2 = Obj();// もう一つ作る。
inst.prop = 2; // 一方のプロパティを変更する。
alert(inst.prop, inst2.prop); // 2 1</pre>
インスタンス同士も独立する。プロトタイプオブジェクトは定義できないが、オブジェクトの原型作成装置としての最低限の機能は果たしている。
<h1>newはどんな仕事をしているのか。</h1>
newは、元から特別なthisにもう少し特別な意味を与えるだけ。
<pre lang="javascript" escaped="true">function Obj() {
	this.prop = 1;
}
Obj.prototype.method = function(){
	alert(this.prop);
}

var inst= new Obj;
inst.method() // 1</pre>
inst.method()として呼び出されたとき、thisはinstを指す。このthisは、先のthatの時のように、prototypeの参照を明示的に代入されていないし、returnで返されているわけでもない。しかし、実際にmethod内のthisは、Obj.prototype + コンストラクタ内で定義されるプロパティを指している。これは、少なくとも
<pre lang="javascript" escaped="true">function Obj() {
	Obj.prototypeを継承してthisを作る。
	this.prop = 1;
	return this
}</pre>
という処理が行われている事を意味する。つまり、newを付けることで、
<ul>
	<li>prototypeプロパティを探し、見つかれば、thisのプロトタイプオブジェクトとしてコピーする。</li>
	<li>return文で他の何かが返されていなければ、thisを暗黙に返す。</li>
</ul>
という作業が行われる。thisは再定義できず、またexecution contextという特別な内部プロパティ (( execution contextには、さらにThisBindingというオブジェクトへの参照を保持するプロパティがある。ThisBindingの他には、スコープ情報を持つLexicalEnvironmentと変数情報を持つVariableEnviromentが存在する。つまり、スコープチェーンとthisの参照先は別々に管理されており、だからこそプロトタイプ定義関数内で使うthisとコンストラクタ内で使うthisが同じオブジェクトを指す、ということが可能になる。)) を示すので、一般的な「スコープチェーン」の範疇には収まらない。従って、
<ul>
	<li>コンストラクタ内で定義したthisのプロパティを、別の所で共有できる。</li>
	<li>そのthisに対して、プロトタイプを設定する。</li>
</ul>
という点で、newを使うことは、先に挙げたthatで代用する方法では実現できない機能を持つ。
<h1>まとめ</h1>
<ul>
	<li>prototypeはプロトタイプオブジェクトそのものではなく、コンストラクタがプロトタイプオブジェクトを作るときに参照する原型である。</li>
	<li>プロトタイプオブジェクトの参照を持つのは、一般的には__proto__である。</li>
	<li>prototypeは、newを付けて呼ばれたコンストラクタが暗黙にプロトタイプオブジェクトの原型として参照するという一点において、ただのオブジェクトと区別される。</li>
	<li>コンストラクタは、newを付けて呼ぶことでthisとプロトタイプに関する暗黙の処理を行う。</li>
	<li>thisはユーザ側で再定義できないし、newを付けなければプロトタイプオブジェクトは作成されないが、それ以外の点ではnewをつけようが付けまいがコンストラクタはただの関数。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>800</wp:post_id>
		<wp:post_date>2011-07-13 00:52:08</wp:post_date>
		<wp:post_date_gmt>2011-07-12 15:52:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>prototype%e3%81%af%e3%83%97%e3%83%ad%e3%83%88%e3%82%bf%e3%82%a4%e3%83%97%e3%81%a7%e3%81%af%e3%81%aa%e3%81%84%e3%81%97%e3%80%81new%e3%82%92%e4%bb%98%e3%81%91%e3%81%aa%e3%81%8f%e3%81%a6%e3%82%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>explorizer.js</title>
		<link>http://hdemon.net/archives/876</link>
		<pubDate>Tue, 30 Aug 2011 03:00:06 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=876</guid>
		<description></description>
		<content:encoded><![CDATA[{{insert_meta script}}
<h1>概要</h1>
WindowsのExplorerを始めとする各種ファイル操作GUIのように、
<ul>
	<li>フォームのサイズ変更、移動</li>
	<li>サイズの上限、下限、範囲設定</li>
	<li>重なりの切り替え</li>
	<li>クリック、ドラッグ、ShiftとCtrlを使った要素の選択</li>
	<li>フォーム間の要素の移動／コピー</li>
	<li>ドラッグによる要素選択時の、自動スクロール機能</li>
</ul>
を実現します。
<h1>使用方法</h1>
<h2>下準備</h2>
ラッパーとなるブロック要素を用意し、CSSで以下の設定をして下さい。
<pre lang="javascript">// #wrapper = 任意のブロック要素
#wrapper {
    position: relative もしくは absolute;
}

#wrapper * {
    -webkit-user-select:none;
    -khtml-user-select: none;
    -moz-user-select:   none;
    user-select:        none;
}</pre>
positionをrelativeかabsoluteにするのは、フォームの位置計算方法を統一するためです。それ以外の場合は表示が狂います。また、それ以降の項目は、テキスト選択機能を無効にしドラッグによる選択時の誤作動を防ぐものです。ちらつきを最小限に抑えつつ誤作動も防ぐには、body内の全ての要素を原則選択禁止にした上で、選択を可能にしたい要素のみ個別に許可する方式が最も望ましいです。 (($wrapperに対して設定しさえすれば異常動作は防げますが、$wrapper内からドラッグを始め、$wrapper外にマウスボタンを押したままドラッグをすると、画面全体がテキスト選択状態になる、あるいはその切替で画面がちらつく場合があります。これはブラウザがテキストを扱うものである以上、避けられない現象だと思われます。もし、$wrapper外のある要素について、その要素のテキストが選択できなくても構わないのであれば、同様に上の指定をすることで、その部分についてちらつきを抑えることが出来ます。ちらつきを抑える最善の策は、body内のあらゆる要素について上記の指定をすることです。))
<h2>スクリプト上の手順</h2>
<ul>
	<li>パラメータ設定</li>
	<li>フォーム作成</li>
	<li>初期化処理</li>
</ul>
の3手順を踏む必要があります。具体的には、
<pre lang="javascript">(function(hdemon){

// グローバルに名前空間"hdemon"が置かれる。
// そこから、explorizerメソッドを呼び出す。
form = hdemon.explorizer

    // パラメータ設定。フォームのラッパー要素指定である"$wrapper"が、唯一必須。
    // $wrapperには、jQueryオブジェクトを与える。
    .set({
        "$wrapper"     : $("#wrapper")
        "width"        : 200,
        "height"       : 300	})

    // addメソッドで、パラメータに従ったフォームを作成。
    .add() // new window-form creation.

// addの戻り値は、
{
    "$form"    // フォームの一番外側の要素で、座標を決める。
    "$content" // フォームの最も内側の要素で、ここに好きな要素を追加することができる。
    "formId"   // ユニークで不変のフォームID
}

// であり、次のように使う。
form.$content
    .append(/*任意の要素。文章とかアイコンとか。*/)
    .css({ "top" : 200 , "left" : 300 });

// そして、フォーム内に要素を追加／削除した場合には、
// 次のように明示的に初期化処理を行う必要がある。
// 初期化処理後、フォーム内の要素は選択／移動・コピー対象になる。
hdemon.explorizer.initialize();

}(window.hdemon));</pre>
のように行います。

※現在のところ、選択機能、移動・コピー機能は備わっていますが、それらを行った後のコールバックができておらず、任意の処理に繋げることができません。これは急いで作成します。
<h1>メソッドおよび引数</h1>
<pre lang="javascript">// 必須のパラメータ
$wrapper      : jQueryオブジェクト // フォームのサイズ変更および移動範囲を限定するラッパー要素。
                                  // jQueryオブジェクトを指定。

// 任意のパラメータ
autoScroll    : int // ドラッグ選択時に、強制的にオートスクロールを有効にするか。
                    // 一般的なブラウザでは、この指定に関わらず有効になる。
scrollWeight  : int // ドラッグ選択時のオートスクロール量

width         : int // 横幅
height        : int // 縦幅
minWidth      : int // 最小の横幅
minHeight     : int // 最小の縦幅
maxWidth      : int // 最小の横幅
maxHeight     : int // 最小の縦幅
tBarHeight    : int // タイトルバーの高さ
removeBtn     : boolean // 「閉じる」ボタンの有無　※未実装

statusBar     : boolean // ステータスバーの有無　※未実装
sBarHeight    : int // ステータスバーの高さ　※未実装

// ※以下はすべて未実装。
callback = {
    manipulated      : handler // 移動・コピー後
    selected         : handler // 選択後
    formRemoved      : handler // フォーム削除後
    formAdded        : handler // フォーム追加後
    onElement        : handler //
    focusChanged     : handler // 特定のフォームをクリックし、フォームの重なりを変化させた後
    focusKeeped      : handler // 特定のフォームをクリックしたが、すでに最前面だった時
    resizingStart    : handler // リサイズ開始時
    resizing         : handler // リサイズ中
    resizingEnded    : handler // リサイズ終了、マウスボタンを離した時。
}</pre>
<h1>ソース</h1>
GitHubに置いてあります。
<a href="https://github.com/hdemon/explorizer.js">https://github.com/hdemon/explorizer.js</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>876</wp:post_id>
		<wp:post_date>2011-08-30 12:00:06</wp:post_date>
		<wp:post_date_gmt>2011-08-30 03:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>explorizer-js</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="not_article"><![CDATA[not article]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>script</wp:meta_key>
			<wp:meta_value><![CDATA[<div id="exp_wrapper">
</div>

<link href="http://hdemon.net/wp-content/uploads/2011/08/explorizer.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="http://hdemon.net/wp-content/uploads/2011/08/explorizer.js"></script>

<style type="text/css">
    #exp_wrapper {
        position:       relative;
        width:          95%;
        height:         500px;
        margin:         10px auto;
        background: #F8F6F6;
        box-shadow: #666 0px 3px 8px;
    }

    * {
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        user-select: none;
    }

    p, pre {
        -webkit-user-select: text;
        -khtml-user-select: text;
        -moz-user-select: text;
        user-select: text;
    }
    
    .hdex_elem {
        float:          left;
        width:          64px;
        height:         64px;
        margin:         15px 0 0 15px;
        border:         #eee solid 5px;
        border-radius:  15px;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        user-select: none;
    }

    .hdex_elem p {
        margin:         5px;
        font-weight:    bold;
        color:          #fff;
    }

</style>
        
<script type="text/javascript" src="./wp-content/themes/hdemon/explorizer.js"></script>
<script>
"use strict";

(function(hdemon){

var	id = 0,
	$form = [];

hdemon.explorizer
	.set({  // parameters setting. Only "$wrapper" is required.
		"$wrapper"	: $("#exp_wrapper"),
        "width"     : 300,
        "height"    : 300	});
          
for (id = 0; id <= 2; id++){  
    $form[ id ] =
    	hdemon.explorizer
    		.add(); // new window-form creation.
}
		
createBox($form[0].$content, 15, 5, 100, 240);
createBox($form[2].$content, 4, 2, 100, 240);
createBox($form[1].$content, 9, 3, 100, 240);

// When you manipulate DOM object in explorizer-form,
// you must call "initialize" method explicitly for resetting events trigger. 
hdemon.explorizer.initialize();

$form[0].$form.css({ "top":50 ,"left":20 });
$form[2].$form.css({ "top":200 ,"left":220 });
$form[1].$form.css({ "top":100 ,"left":350 });
            
// グラデーション付き要素作成
// 以下の記事を参考にさせて頂きました。
// http://www13.plala.or.jp/kymats/study/gazou/HSB/HSB.html
function createBox($form, n, __h, _s, _b){
    var	_h, r, g, b;
    
    for (var i=0; i< n; i++){
        $form.append(
            "<div " +
            "class=\"hdex_elem\""+
            ">" +
            "</div>"
        );
        
        _h	= 60*__h + i*(60/n);
        
        var max	= _b,
       		min	= max-_s*max/255,
        	hue	= _h;

		if ( hue < 60 )  {
			r = max;
			g = min +hue* ( max-min ) /60;
			b = min;
		} else if ( hue < 120 )  {
			r = max- ( hue - 60 ) * ( max-min ) /60;
			g = max;
			b = min;
		} else if ( hue < 180 )  {
			r = min;
			g = max;
			b = min + ( hue - 120 ) * ( max-min ) /60;
		} else if ( hue < 240 )  {
			r = min;
			g = max- ( hue - 180 ) * ( max-min ) /60;
			b = max;
		} else if ( hue < 300 )  {
			r = min + ( hue - 240 ) * ( max-min ) /60;
			g = min;
			b = max;
		} else {
			r = max;
			g = min;
			b = max- ( hue - 300 ) * ( max-min ) /60;
		} 
		
		r	= Math.floor(r);
		g	= Math.floor(g);
		b	= Math.floor(b);
		   
        $form.children(".hdex_elem:last")
        	.append("<p>" + i + "</p>")
        	.css({ "background" : "rgb(" + [r, g, b].join(",") + ")" });
    }
};

}(window.hdemon));

</script>]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CentOS 6 64bitで、Ruby 1.9.2 + eclipse 3.7 + MySQL 5.5の開発環境を整える。</title>
		<link>http://hdemon.net/archives/934</link>
		<pubDate>Fri, 19 Aug 2011 08:39:49 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=934</guid>
		<description></description>
		<content:encoded><![CDATA[Ruby 1.9.2の開発環境をEclipseとMySQL込みで整えようとしたらエラい苦労したので、メモとして残しておきます。なお、エラーメッセージからの検索に引っかかりやすくするため、常識的な考えでインストールを試みた場合のありがちなエラーメッセージを挿入しています。<strong>処方だけを知りたい方は、一番最後のトピックを見て下さい。</strong>

想定するのは、<strong>CentOS 6.0 64bitを"Minimal Desktop"でインストールした環境</strong>。ただ32bitでも、インストールにおいては恐らくディレクトリ名が変わるだけだし、我々がそれに干渉することはないので、以下を同様に実行してもたぶん問題ないでしょう。各ライブラリのバージョン等は執筆時点のものなので、適宜変更して下さい。
<h1><span class="Apple-style-span" style="color: #000000; font-size: 14px; line-height: 21px;">Rubyを入れる。</span></h1>
CentOSを入れ終わり、ネットに接続し、rootでログインしている事を前提とする。

まずRubyを入れるが、yumで入れるとバージョンが1.8.7なので、1.9.2のソースを入手して自分でコンパイルする。ただし、その前にやることがある。

Rubyにはirbという使い勝手のいいインタプリタツールが付属しているが、readlineというライブラリを先に入れてからmakeしないと、このirbにおいて、linuxのCUI同様の↑↓キーで入力履歴を呼び出す機能などが使えず大変不便。そこで、先にこのようにする ((たぶん、yum -y install readlineは必要ないと思う。)) 。
<pre lang="text">yum -y install readline-devel</pre>
それが終わったら、
<pre lang="text">wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p290.tar.gz
tar xvzf ruby-1.9.2-p290.tar.gz
cd ruby-1.9.2-p290
./configure
make
make install</pre>
このようにすればいい…と思いきや、たぶんこうなる。
<pre lang="text"># ./configure
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking target system type... x86_64-unknown-linux-gnu
checking for gcc... no
checking for cc... no
checking for cl.exe... no
configure: error: in `/tmp/ruby-1.9.2-p290':
configure: error: no acceptable C compiler found in $PATH
See `config.log' for more details</pre>
まさかと思ったが、Minimal DesktopではCコンパイラがデフォルトでは入ってない。そこで、
<pre lang="text">yum -y install gcc</pre>
とした後、再度上のコマンドを実行する。最後にruby -vとでもして確認しておく。
なお、Rubyのソース内にはこの後で使うスクリプトがあるので、<strong>インストールが終わっても消さずにとっておく。</strong>
<h1>RubyGemsを入れる</h1>
yumだとバージョンが1.3.7、それに対し最新版は1.8.8。結構な違いがあるように思うので、これも自分で最新版を入れる。
<pre lang="text">wget http://rubyforge.org/frs/download.php/75255/rubygems-1.8.8.tgz
tar xvzf rubygems-1.8.8.tgz
cd rubygems-1.8.8
ruby setup.rb</pre>
これで終わり。ただし、このままではgem実行時に
<pre lang="text"># gem install mysql
ERROR:  Loading command: install (LoadError)
    no such file to load -- zlib
ERROR:  While executing gem ... (NameError)
    uninitialized constant Gem::Commands::InstallCommand</pre>
という「zlibが足りない」エラーが出るはず。それを回避するため、zlib-develをyumで入れた後、先ほど解凍したRubyソースディレクトリ内の、/ext/zlib/extconf.rbを実行する。
<pre lang="text">yum install -y zlib-devel
cd Rubyソースのディレクトリ/ext/zlib
ruby extconf.rb
make
make install</pre>
ちなみに、zlib-develをインストールせずにruby extconf.rbとした場合には、次のようなエラーが出るはず。
<pre lang="text"># ruby extconf.rb
checking for deflateReset() in -lz... no
checking for deflateReset() in -llibz... no
checking for deflateReset() in -lzlib1... no
checking for deflateReset() in -lzlib... no
checking for deflateReset() in -lzdll... no</pre>
なお、<strong>Rubyのソースはこの後さらに使う機会があるので、まだ消してはいけない。</strong>
<h1>MySQLを入れる</h1>
<a href="http://yktweb.sakura.ne.jp/blog/home-server/188.html">こちら</a>を参考にした。

rpmでもソースコンパイルでもいいんだけど、"Minimal Desktop"構成だとすでにMySQL 5.1が入っており、へたに後入れして関連ライブラリごとのバージョン相違などを起こしたくないので、できるだけyumでやりたい。

ただ当然ながら、保守派のCentOSさんのデフォルトレポジトリには5.5が入っていない。そこで、5.5が存在するremiレポジトリを使えるようにする ((CentOS "6"かつ64bit用のレポジトリをダウンロードしている事に注意。)) 。
<pre lang="text"># remiレポジトリを有効にする。epelはremiが依存するパッケージなので、これも必要。
rpm -ivh http://download.fedora.redhat.com/pub/epel/6/x86_64/epel-release-6-5.noarch.rpm
rpm -ivh http://remi-mirror.dedipower.com/enterprise/remi-release-6.rpm</pre>
その後、
<pre lang="text">yum --enablerepo=remi -y install mysql mysql-devel mysql-server</pre>
とする。
<h1>MySQL/Rubyを入れる</h1>
<a href="http://www.tmtm.org/mysql/ruby/">MySQL/Ruby</a>とは、とみたまさひろ氏の作ったRuby用MySQL API。実は<a href="http://tmtm.org/ruby/mysql/">Ruby/MySQL</a>というRubyのみで書かれたライブラリもあり、<a href="http://www.slideshare.net/tmtm/mysqlruby">作者はそちらの使用を薦めている</a>のだが、今回はMySQL/Rubyを入れる。それには、単に
<pre lang="text">gem install mysql</pre>
とすればよい。

さて、今回の僕と全く同じ環境でやればエラーは出ないと思うが、<strong>場合によっては次のようなエラーが出るかもしれない</strong>（以前僕も経験したが、どういう環境だったかは忘れた。ソースからMySQLを入れた後、適切な設定をしないままだとこうなるんじゃなかったか）。
<pre lang="text"># gem install mysql
Building native extensions.  This could take a while...
ERROR:  Error installing mysql:
	ERROR: Failed to build gem native extension.

/usr/local/bin/ruby extconf.rb install mysql
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lm... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lz... yes
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lsocket... no
checking for mysql_query() in -lmysqlclient... no
checking for main() in -lnsl... yes
checking for mysql_query() in -lmysqlclient... no
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.</pre>
どうやら、mysqlのメソッドの存在を認識できていない様子。ならばmysqlの設定の存在を教えてあげればいい。具体的には、
<pre lang="text">gem install mysql -- --with-mysql-config
# もしくは
gem install mysql -- --with-mysql-config=(パス)/mysql_config</pre>
とする。mysql_configのパスは、
<pre lang="text">whereis mysql_config</pre>
として探せばいいんじゃないかと思う。たぶん/usr/binと/usr/lib64にある（32bitなら/usr/libだろう） 。
<h1>Eclipseを入れる</h1>
ブラウザからダウンロードしてもいいし、適当なミラーを探した上で、
<pre lang="text">wget http://www.ring.gr.jp/pub/misc/eclipse/downloads/drops/R-3.7-201106131736/eclipse-SDK-3.7-linux-gtk-x86_64.tar.gz</pre>
などとしてもいい。その後は、<a href="http://www.if-not-true-then-false.com/2010/linux-install-eclipse-on-fedora-centos-red-hat-rhel/">こちらに書いてある通り</a>やればいい。ここでは省略したが、最後のまとめに全処理を書いておいた。
<h1>Aptana Pluginを入れる</h1>
<a href="http://www.aptana.com/products/studio3/download">http://www.aptana.com/products/studio3/download</a>

ここへ行き、Eclipse Plug-in Versionにチェックした上で、下のDownloadボタンを押す。
<pre lang="text">http://download.aptana.com/studio3/plugin/install</pre>
すると、↑が表示されるはずなので、これをコピーし、
<ol>
	<li>EclipseのHelp -&gt; Install New Software</li>
	<li>冒頭の"Work with"のテキストボックスにペースト</li>
	<li>下のボックスに"Aptana Studio 3"が現れるので、チェックをして右下のインストールボタンを押し、支持に従う</li>
</ol>
で、めでたくAptanaプラグインが導入され、Ruby固有の処理が可能になる。
<h1>ruby-debugを入れる</h1>
これを入れないと、Eclipseのデバッガが有効にならない。入れていない場合、Eclipseのデバッグ開始時に次のようなメッセージが出ると思う。
<pre lang="text">Unable to find 'rdebug-ide' binary script. May need to install 'ruby-debug-ide' gem, or may need to add your gem executable directory to your PATH (check location via 'gem environment').</pre>
つまり、ruby-debug-ideを入れなければならない。しかし、単純に gem install ruby-debug-ideとすると、
<pre lang="text"># gem install ruby-debug-ide
Building native extensions.  This could take a while...
ERROR:  Error installing ruby-debug-ide:
	ERROR: Failed to build gem native extension.

        /usr/local/bin/ruby mkrf_conf.rb
Building native extensions.  This could take a while...

Gem files will remain installed in /usr/local/lib/ruby/gems/1.9.1/gems/ruby-debug-ide-0.4.16 for inspection.
Results logged to /usr/local/lib/ruby/gems/1.9.1/gems/ruby-debug-ide-0.4.16/ext/gem_make.out</pre>
このようになると思う。ruby-debug-ideはruby-debug-baseという別のライブラリに依存しているので、そちらを先に入れなければならない。

しかし、gem install ruby-debug-baseとすると、これもまた簡単にいかない。
<pre lang="text"># gem install ruby-debug-base
ERROR:  Error installing ruby-debug-base:
	rbx-require-relative requires Ruby version ~&gt; 1.8.7.</pre>
1.8.7なんか使ってないのに…。バージョン管理ツールのrvmを使って、<a href="http://blog.pg1x.com/tag/rvmsudo/">デフォルトを1.9.2と明示的に設定</a>すればいいのかと思ったが、<strong>その方法ではダメ</strong>だった。調べてみると、どうやら1.9.2用のruby-debug19というものがあり、これがruby-debug-baseに値するらしい。したがって、それを先に入れる。

<strong>…えっさすがに今度はうまく行くよね？</strong>　いやいや上手くいきません。頭の痛いことに、これもそのままではインストールできない。
<pre lang="text"># gem install ruby-debug19
Building native extensions.  This could take a while...
ERROR:  Error installing ruby-debug19:
	ERROR: Failed to build gem native extension.

        /usr/local/rvm/rubies/ruby-1.9.2-p290/bin/ruby extconf.rb
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.

Provided configuration options:
	--with-opt-dir
	--without-opt-dir
	--with-opt-include
	--without-opt-include=${opt-dir}/include
	--with-opt-lib
	--without-opt-lib=${opt-dir}/lib
	--with-make-prog
	--without-make-prog
	--srcdir=.
	--curdir
	--ruby=/usr/local/rvm/rubies/ruby-1.9.2-p290/bin/ruby
/usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require': no such file to load -- openssl (LoadError)
	from /usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
	from /usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/net/https.rb:92:in `&lt;top (required)&gt;'
	from /usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
	from /usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
	from /usr/local/rvm/gems/ruby-1.9.2-p290/gems/ruby_core_source-0.1.5/lib/contrib/uri_ext.rb:11:in `&lt;top (required)&gt;'
	from /usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
	from /usr/local/rvm/rubies/ruby-1.9.2-p290/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36:in `require'
	from /usr/local/rvm/gems/ruby-1.9.2-p290/gems/ruby_core_source-0.1.5/lib/ruby_core_source.rb:6:in `&lt;top (required)&gt;'
	from &lt;internal:lib/rubygems/custom_require&gt;:33:in `require'
	from &lt;internal:lib/rubygems/custom_require&gt;:33:in `rescue in require'
	from &lt;internal:lib/rubygems/custom_require&gt;:29:in `require'
	from extconf.rb:2:in `&lt;main&gt;'

Gem files will remain installed in /usr/local/rvm/gems/ruby-1.9.2-p290/gems/linecache19-0.5.12 for inspection.
Results logged to /usr/local/rvm/gems/ruby-1.9.2-p290/gems/linecache19-0.5.12/ext/trace_nums/gem_make.out</pre>
長いので何が問題かが分かりづらいが、中盤に「opensslが見つからない」とある。ただし、ここで <strong>yum install openssl openssl-develとかやっても効果がない。</strong>（というよりも、yumでMySQL5.5を入れたなら、両者とも依存ライブラリとしてすでにインストールされているはず。）

そこで再度、消さずに取っておいたRubyのソースが活躍する。zlibのときと同様にソース付属のスクリプトを使い、次のように実行する。
<pre lang="text">cd rubyのディレクトリ/ext/openssl
ruby extconf.rb
make
make install</pre>
そうすると、やっと
<pre lang="text">gem install ruby-debug19
gem install ruby-debug-ide</pre>
が通るようになる。ここでgem listを確認してみると、
<pre lang="text">gem list
archive-tar-minitar (0.5.2)
columnize (0.3.4)
linecache19 (0.5.12)
rake (0.9.2 ruby)
ruby-debug-base19 (0.11.25)
ruby-debug-ide (0.4.16)
ruby-debug19 (0.11.6)
ruby_core_source (0.1.5)</pre>
このようにbaseもideも入ってると思う。そして、Eclipseのデバッグも有効に機能するはず。
<h1>結局何をやればいいのか</h1>
以下を上から実行すればいいと思います。ただし上述のように、適宜バージョン等を変えて。
<h2>Ruby</h2>
<pre lang="text"># irbの履歴機能を有効にするための準備
yum -y install readline-devel

# まだ入れていなければ、Cコンパイラのインストール
yum -y install gcc

# rubyのインストール
wget ftp://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p290.tar.gz
tar xvzf ruby-1.9.2-p290.tar.gz
cd ./ruby-1.9.2-p290
./configure
make
make install</pre>
<h2>RubyGems</h2>
<pre lang="text"># RubyGemsのインストール
wget http://rubyforge.org/frs/download.php/75255/rubygems-1.8.8.tgz
tar xvzf rubygems-1.8.8.tgz
cd rubygems-1.8.8
ruby setup.rb

# zlibのインストール
yum install -y zlib-devel
cd ./ruby-1.9.2-p290/ext/zlib
ruby extconf.rb
make
make instal</pre>
<h2>MySQLとMySQL/Ruby</h2>
<pre lang="text"># remiレポジトリを有効にする。epelはremiが依存するパッケージなので、これも必要。
rpm -ivh http://download.fedora.redhat.com/pub/epel/6/x86_64/epel-release-6-5.noarch.rpm
rpm -ivh http://remi-mirror.dedipower.com/enterprise/remi-release-6.rpm

# MySQL5.5のインストール
yum --enablerepo=remi,epel install mysql mysql-devel

# MySQL/Rubyのインストール
# 問題が出た場合は、記事を参照
gem install mysql</pre>
<h2>Eclipse</h2>
<pre lang="text"># eclipseのインストール
wget http://www.ring.gr.jp/pub/misc/eclipse/downloads/drops/R-3.7-201106131736/eclipse-SDK-3.7-linux-gtk-x86_64.tar.gz
tar -xvzf eclipse-SDK-3.7-linux-gtk-x86_64.tar.gz -C /opt

# 読み取りのパーミッションを付与し、/usr/binとのパスを繋げる。
# 以下、/optは適宜変更する。
chmod -R +r /opt/eclipse
touch /usr/bin/eclipse
chmod 755 /usr/bin/eclipse

#　以下の内容のファイルを、
# /usr/bin/eclipseという名前で作る（この行の下から）。
#!/bin/sh
export ECLIPSE_HOME="/opt/eclipse"

$ECLIPSE_HOME/eclipse $*

## Create following file, with our favourite editor ##
/usr/share/applications/eclipse.desktop

# 以下の内容のファイルを、
# /usr/share/applications/eclipse.desktopという名前で作る。
[Desktop Entry]
Encoding=UTF-8
Name=Eclipse
Comment=Eclipse SDK 3.7
Exec=eclipse
Icon=/opt/eclipse/icon.xpm
Terminal=false
Type=Application
Categories=GNOME;Application;Development;
StartupNotify=true</pre>
<h2><span style="font-size: small;">Aptana Plugin</span></h2>
<pre lang="text"># EclipseのHelp -&gt; Install New Software
# 冒頭の"Work with"のテキストボックスにペースト
# 下のボックスに"Aptana Studio 3"が現れるので、チェックをして右下のインストールボタンを押し、支持に従う</pre>
<h2>ruby-debug</h2>
<pre lang="text"># opensslのインストール？
cd ./ruby-1.9.2-p290/ext/openssl
ruby extconf.rb
make
make install

# ruby-debugのインストール
gem install ruby-debug19
gem install ruby-debug-ide</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>934</wp:post_id>
		<wp:post_date>2011-08-19 17:39:49</wp:post_date>
		<wp:post_date_gmt>2011-08-19 08:39:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>centos-6-64bit%e3%81%a7%e3%80%81ruby-1-9-2-eclipse-3-7-mysql-5-5%e3%81%ae%e9%96%8b%e7%99%ba%e7%92%b0%e5%a2%83%e3%82%92%e6%95%b4%e3%81%88%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="centos"><![CDATA[CentOS]]></category>
		<category domain="post_tag" nicename="eclipse"><![CDATA[Eclipse]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="popular"><![CDATA[popular]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux用マウスジェスチャソフト&quot;easystroke&quot;をビルドする。</title>
		<link>http://hdemon.net/archives/1022</link>
		<pubDate>Wed, 24 Aug 2011 12:57:12 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://hdemon.net/?p=1006</guid>
		<description></description>
		<content:encoded><![CDATA[<h1 style="text-align: left;">Linuxでも、マウスジェスチャが欲しい。</h1>
<p style="text-align: left;">WindowsからLinuxに開発環境を移行したいのですが、ブラウザを頻繁に使う以上、マウスジェスチャはぜひとも欲しい。Windowsでは<a href="http://www.staticflower.net/software/kazaguru.html">「かざぐるマウス」</a>を使っており、アプリ毎に違う挙動を設定できたりして大変重宝しているのですが、Linuxでも同様のものが無いかを探したところ、どうやら<a href="http://sourceforge.net/apps/trac/easystroke/wiki">easystroke</a>というのが有名らしいと分かりました。</p>
&nbsp;
<p style="text-align: center;"><a href="http://dev/wordpress/wp-content/uploads/2011/08/easystroke.png"><img class="alignnone size-full wp-image-1043 aligncenter" title="easystroke" src="http://dev/wordpress/wp-content/uploads/2011/08/easystroke.png" alt="" width="389" height="334" /></a></p>
<p style="font-size: 10px; text-align: center;">こんなふうに、マウスの動きとキーやコマンドを対応させられます。</p>
<p style="font-size: 10px; text-align: center;">この例は直線的な動きのみですが、もっと複雑な動きも可能です。</p>
&nbsp;

で、早速入れようと思ったのですが、Ubuntuを除いてパッケージ化はされておらず、自分のCentOSの環境ではソースからビルドしないといけません。まぁ別に難しいことはねぇだろと思っていたのですが、依存関係で結構苦戦しました。今回はその解決策を書き留めておきます。
<h1>エラーメッセージと、対応するパッケージ</h1>
<strong>どんなエラーが出た時にyumでなにを入れたら解決したか</strong>、という一覧です。したがって、yumによって解決される依存関係については省いてあります。

&nbsp;
<ul>
	<li>gccとg++がどうたら ((再現するにはクリーンな状態を作らないといけませんが、面倒なのでやってません。まあ、何がしかのソースをビルドするなら必須ですから、皆さん最初に入れてますよね。))</li>
<ul>
	<li>gcc gcc-g++</li>
</ul>
</ul>
&nbsp;
<ul>
	<li>Package gtkmm-2.4 was not found in the pkg-config search path.</li>
<ul>
	<li>gtkmm24 gtkmm24-devel</li>
</ul>
</ul>
&nbsp;
<ul>
	<li>Package dbus-glib-1 was not found in the pkg-config search path.</li>
<ul>
	<li>dbus-glib dbus-glib-devel</li>
</ul>
</ul>
&nbsp;
<ul>
	<li>actiondb.h:21:42: 警告: boost/serialization/access.hpp: そのようなファイルやディレクトリはありません　…以降10個程度の「boost/*が無い」という警告</li>
<ul>
	<li>boost-devel</li>
</ul>
</ul>
&nbsp;
<ul>
	<li>grabber.cc:21:34: 警告: X11/extensions/XTest.h: そのようなファイルやディレクトリはありません</li>
<ul>
	<li>libXtst-devel</li>
</ul>
</ul>
&nbsp;
<ul>
	<li>grabber.cc:22:37: 警告: xorg/xserver-properties.h: そのようなファイルやディレクトリはありません</li>
<ul>
	<li>xorg-x11-server-devel</li>
</ul>
</ul>
&nbsp;

これでmakeが通るはずです。
<h1>結局どうすればいいの</h1>
こうすればいいんじゃないでしょうか。
<pre lang="text" escaped="true">wget http://sourceforge.net/projects/easystroke/files/easystroke/0.5.5.1/easystroke-0.5.5.1.tar.gz
 yum gcc-g++ gtkmm24 gtk24-devel dbus-glib dbus-glib-devel boost-devel libXtst-devel xorg-x11-server-devel
 tar xvzf easystroke-0.5.5.1.tar.gz
 cd easystroke-0.5.5.1
 make
 make install</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[Linux用マウスジェスチャソフト"easystroke"のビルド方法、依存関係の解決方法。]]></excerpt:encoded>
		<wp:post_id>1022</wp:post_id>
		<wp:post_date>2011-08-24 21:57:12</wp:post_date>
		<wp:post_date_gmt>2011-08-24 12:57:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>linux%e7%94%a8%e3%83%9e%e3%82%a6%e3%82%b9%e3%82%b8%e3%82%a7%e3%82%b9%e3%83%81%e3%83%a3%e3%82%bd%e3%83%95%e3%83%88-easystroke%e3%82%92%e3%83%93%e3%83%ab%e3%83%89%e3%81%99%e3%82%8b%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="article"><![CDATA[article]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[hdemon]]></wp:comment_author>
			<wp:comment_author_email>zeitdiebe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>192.168.31.1</wp:comment_author_IP>
			<wp:comment_date>2011-08-24 23:59:04</wp:comment_date>
			<wp:comment_date_gmt>2011-08-24 14:59:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[test]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1314266503]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[hdemon]]></wp:comment_author>
			<wp:comment_author_email>zeitdiebe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>192.168.31.1</wp:comment_author_IP>
			<wp:comment_date>2011-08-25 00:01:17</wp:comment_date>
			<wp:comment_date_gmt>2011-08-24 15:01:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[testtest]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1314266502]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>My Creatures</title>
		<link>http://hdemon.net/archives/1117</link>
		<pubDate>Mon, 29 Aug 2011 16:49:14 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://dev/wordpress/?p=1117</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>explorizer.js</h1>
エクスプローラに代表されるファイラーの挙動を、ブラウザ上で実現します。
作り出したフォームは、まさにウィンドウの様に、拡大縮小・移動が可能です。フォームの中に作った要素は、ドラッグによる選択はもちろん、Ctrl・Shiftとクリックを組み合わせた選択が可能であり、それを他のフォームへコピー／移動させることができます。また、選択後や移動後などにコールバックを行い、任意の処理をさせることができます。

<a href="http://hdemon.net/876/">デモンストレーションと解説</a>

<a href="https://github.com/hdemon/explorizer.js">ソース</a>

<h1>nicomanip.js</h1>
あなたのニコニコ動画マイリストを操作できる、ブラウザエクステンション用のライブラリです。チェーンメソッドで簡単に目的の動画をソートし、さらに上限下限設定で選別した上で、特定のマイリストへコピーや移動することが可能です。

<a href="http://hdemon.net/archives/1176">ソース及び解説はこちら</a>
<h1>masonicol.js</h1>
pタグ等でマークアップされている文章であれば、これで簡単に段組化することが可能です。

<a href="http://hdemon.net/archives/327">ソース及び解説はこちら</a>
<h1>ゆっくり実況ランキング</h1>
ニコニコ動画のゆっくり実況動画を集計し、ランキング形式で掲載するサイト…を作ろうと頑張っています。経過は以下の別ブログで。

<a href="http://d.hatena.ne.jp/hdemon/"> ゆっくり実況ランキング開発ブログ</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1117</wp:post_id>
		<wp:post_date>2011-08-30 01:49:14</wp:post_date>
		<wp:post_date_gmt>2011-08-29 16:49:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creatures</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="noreplyform"><![CDATA[NoReplyForm]]></category>
		<category domain="category" nicename="not_article"><![CDATA[not article]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>nicomanip.js</title>
		<link>http://hdemon.net/archives/1176</link>
		<pubDate>Fri, 15 Jul 2011 02:26:39 +0000</pubDate>
		<dc:creator>hdemon</dc:creator>
		<guid isPermaLink="false">http://dev/wordpress/?p=1176</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>概要</h1>
ニコニコ動画APIを操作し、動画／静画情報の取得、抽出、ソート、コピー／移動等を可能にするブラウザアドオン用ライブラリです。とりあえず、Chrome Extension上での動作を確認しています。
<h1>使い方</h1>
<h2>準備と基本操作</h2>
<ol>
	<li>manifest.jsonの"permissions"で、"http://www.nicovideo.jp/*"と"http://ext.nicovideo.jp/*"への接続を許可して下さい。</li>
	<li>backgroundもしくはcontent script内でnicomanip.jsを読み込みます。</li>
	<li>読み込んだ先で、MyNicoモジュールよりマイリストオブジェクトを作成します。</li>
	<li>reloadメソッドで動画情報を読み込み、コールバックを設定します。</li>
	<li>以上で準備は完了です。ニコニコ動画にログインした状態で、reloadのコールバック内からマイリストオブジェクトのfilterやsortメソッドを呼び出し、それらをチェーンメソッドでつないで、copy/move等の目的の操作を行って下さい。</li>
</ol>
<h2>具体例</h2>
<pre lang="javascript">// マイリスオブジェクトを作成し、
var mylist = new MyNico;

// reloadメソッドでマイリス中の全動画情報を読み、
// コールバック内に目的の処理を記述する。
// マイリストオブジェクトはコールバック関数の第1引数に与えられる。
mylist.reload(function(mylist){

    mylist
        .filter({ // 全マイリスから再生時間5分以上のものを抽出し、
            length_seconds: {
                min : 300
            }
        })
        .filter({ // さらに、その中から再生回数1000～2000の動画を抽出
            view_counter : {
                min : 1000,
                max : 2000
            }
        })
        .sort({
            condition : [ // 抽出結果を昇順の再生回数でソートし、
                {
                    name : "view_counter",
                    ascend : true
                }
            ],
            low : 10 // ソートしたものの内、上位10件を抽出する。
        })
        .copy(123456789);　// 抽出したものを、マイリスID:123456789へコピーする。
}</pre>
&nbsp;
<h1>主なメソッド</h1>
<h1>reload</h1>
コールバック関数の第一仮引数にマイリストオブジェクトが与えられる。そのオブジェクトを使い、以下のメソッドをつなげていく。マイリストオブジェクトについては後述。
<h1>filter</h1>
現在のマイリストオブジェクトから、与えられた条件に該当する要素のみを抽出する。 マイリストオブジェクトの構造およびプロトタイプは変化せず、抽出されたものに対してチェーンメソッドを適用できる。
<h2>例</h2>
<pre lang="javascript">mylist
  .filter({
    length_seconds: {
      min : 300
    }
  })
  .filter({
    view_counter: {
      max : 1000
    }
  })
  .copy(123456789);</pre>
<ol>
	<li>動画時間が5分以上のものを抽出。</li>
	<li>抽出結果から、さらに閲覧数が1000以下のものを抽出。</li>
	<li>それをID:123456789のマイリストへコピーする。</li>
</ol>
<h2>引数</h2>
<pre lang="javascript">{
    動画プロパティ（後述）: {
        max : フィルタリング上限値
        min : フィルタリング下限値
    }
}
// maxとminは単独でも使用可能。</pre>
<h1>sort</h1>
与えられたプロパティ名に基づくソートを行う。 max、minのいずれか、もしくは両方を指定した場合、ソート結果からこれらの条件に従って抽出されたマイリストオブジェクトを返す。 これらのパラメータを指定しない場合、マイリストID、アイテムID、ソート対象の値を要素とするオブジェクトの配列を返す。
<h2>例</h2>
<pre lang="javascript">mylist
  .sort({
    condition : [
      {
        name : "view_counter",
        ascend : true
      }
    ],
    min : 10
  })
  .copy(123456789);</pre>
<ol>
	<li>全動画／静画の内、閲覧数トップ10のみを含むオブジェクトを返し、</li>
	<li>それをID:123456789のマイリストへコピーする。</li>
</ol>
<h2>引数</h2>
<pre lang="javascript">{
    condition : [
      {
        name : 動画プロパティ,
        ascend : 昇順 = true / 降順 = false
      }
    ]
}</pre>
<h1>copy / move</h1>
与えられたマイリストオブジェクトに含まれるアイテムを、指定されたマイリストへコピー/移動させるメソッド。 チェーンメソッド形式で、filter、sortと組み合わせることが可能。引数はマイリストIDだけなので、使用法は最初の例を参照。
<h1>findOverlap</h1>
重複するアイテムを探し、リストを返す。引数はアイテムID。
<h1></h1>
<h1>マイリストオブジェクトの構造</h1>
<pre lang="javascript">  // 例
  mylist:            // マイリストオブジェクト    
    3456789:         // マイリストId -------------------
      create_time:   1205048587  // マイリスト作成時（以下全てUNIX時間）
      default_sort:  "0"      // マイリストソート順
      description:   ""      //
      icon_id:       "0"
      id:            "3456789"
      name:          "保管用"
      public:        "0"
      sort_order:    "16"
      type:          "normalList"
      update_time:   1302364463
      user_id:       "5678901"
      elements:      // アイテムオブジェクト -------------
        // アイテムID
        1192907034:       
          create_time:    1216175282    // 動画作成時間
          deleted:        "0"           // 削除済みか否か
          description:    ""            // ユーザによる動画説明文
          first_retrieve: 1192907034
          group_type:     "default"     //
          item_id:        "1192907034"  // アイテムID
          item_type:      0             // アイテムの種類 動画：0 静画：５
          last_res_body:  "ｗｗｗｗｗｗ アホすぎワロタｗｗｗ エナジーボンボン wwwww... "
          length_seconds: "78"          // 動画時間（秒）
          mylist_counter: "7"           // マイリスト数
          num_res:        "205"         // コメント数
          posting_time:   1285386290    // 投稿日時
          thumbnail_url:  "http://tn-skr4.smilevideo.jp/smile?i=1326983"
          title:          "テレポーテーションのやりかた。その2"  // タイトル
          update_time:    1216175282
          video_id:       "sm1326983"   // 動画ID
          view_counter:   "8086"        // 閲覧数
          watch:          0
          watch_id:       "sm1326983"
    1234567: Object...
    2345678: Object...
</pre>
簡略化すると、次のようになる。
<pre lang="javascript">mylist: {
   マイリストID:
       ...
       elements:
           アイテムID:
           ...</pre>
アイテムIDとはsmやnmで始まるIDではなく、それとは別の固有ID。たぶん、我々が直接目にする形では出てこないと思う。動画ページにJavaScriptオブジェクトやmetaタグとして埋め込まれているので、HTMLを読めば分かる。
そして、filterやsortのプロパティには、"elements"以下のプロパティ名を与える。例えば、
<ul>
	<li>動画時間でソートしたい　→　.sort({ condition : [{"length_seconds" : ...</li>
	<li>５０音順でソートしたい　→　.sort({ condition : [{"title" : ...</li>
	<li>投稿日の早いものだけ抽出したい　→　.filter({ create_time : { max : ...</li>
</ul>
こういう感じに。
<h1>ソース</h1>
GitHub : <a href="https://github.com/hdemon/nicomanip.js">https://github.com/hdemon/nicomanip.js</a>
<h1>各メソッドの詳細</h1>
JsDoc : <a href="http://hdemon.github.com/nicomanip.js/index.html">http://hdemon.github.com/nicomanip.js/index.html</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1176</wp:post_id>
		<wp:post_date>2011-07-15 11:26:39</wp:post_date>
		<wp:post_date_gmt>2011-07-15 02:26:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1176</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="not_article"><![CDATA[not article]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>






言語とフレームワーク

　職を得るという目的で始めたので、最初は求人数の多いJavaかPHPにしようと思っていた。しかし、Javaのフレームワークはムズい。そして解説は山ほどあっても、システムとして巨大なものか、あるいは業務知識を前提にするものが多かった。
　じゃあPHPはどうかということで考え、割とお節介を焼かないという評判のZend Frameworkを試そうと思った。…しかし、随所でPHPがdisられたり擁護されたり

　ちょうどその頃、Rubyでニコ動の情報を取得するライブラリを書きはじめ出し、Rubyで書くことがすごく楽しくて快適な経験だったので、だったらもう全部RubyにしようかということでRailsを始めることにした。




REXMLの遅さに悩む

　ニコ動は

　XPathが使えて、nokogiriよりも扱いやすい。最初はこれでやっていたが、ニコ動マイリス1つ分のRSSをパースするだけで茶ァ飲める程遅いので、パーサを変えることにした。

　次に目をつけたのはNokogiri。実は最初、RSSではなくHtmlからMechanizeを使って情報を取得する設計にしていたので、多少慣れているし使いやすかろうと思ったのだ。

　ところが、XPathが使えるのはいいのだが、文字コードにナイーブすぎてニコ動のRSSをそのままこれでパースしようとすると問題が起こる。具体的には、REXMLなら認識すべきパスを認識しない、内部パーサがタグ終端を認識できずエラーを吐くなど。エラーを起こす文字を正規表現で取り除いてから食わせたりしていたが、本末転倒に感じて辞めた。

　そうすると、残りはlibxmlぐらいしかない。ところが、よく調べてみると、libxmlには2つのモードがあるらしいと分かった。1つは普通に全体を読み込んでノードを辿っていく方法。もう1つはトークン毎に頭から順次読み込んで処理を行うストリーム方式。

　ストリーム方式のドキュメントは少なかったが、簡単なコードを書いてみると、なんとか手探りでできそうな感じ。しかも速い。ということでlibxmlを採用した。

　しかし、これ単独で完全なパーサを書こうとすると、XPath以上にXMLの知識が要求されると思う。あとネット上の解説が少ない。
　ただし私の場合は、取得したい文字列が正規表現で安定して取得できる階層までを荒く分解するためだけに使ったので、それほど難しくは感じなかった。



データベース選び

MySQL

　王道で行く方針だったので、最初はMySQLでやっていた。テーブルの正規化も覚え、簡単なJOINも覚え、任意の要素と期間のランキングを出す程度のクエリーは何とか実装できた。
　が、日々の再生数等のログをどうやって保存するか、という点でつまづいた。
　動画 x 再生数等の日々の変動要素 x 日時という形式に対し、律儀に動画 x 日時のテーブル x 変動要素の個数で設計することも考えたが、「カラムがいずれ1000とか超えるけどそれでいいの？」という問いに答えられず、とりあえず動画別にJSONに書き出す形式にしていた。
　しかし、さらに考えた。テーブル<->JSONの変換を毎度毎度行うぐらいなら、はなからオブジェクティブなDBに保存すりゃいいじゃん、と。それまでは敬遠していたのだが、この機会にNoSQL―クエリーが充実しているという話なので、MongoDBを試すことにした。

MongoDB

　素晴らしい翻訳のお陰で、単純なfind, insert程度なら驚くほど簡単にできた。
　ただし、少し高度なクエリーを実行しようとすると、リファレンスが若干物足りなく思った。具体的には、JSコンソールのクエリー書式とRubyドライバの書式の一部が、かなり異なる。




サーバ選び

自宅サーバは難しい

　立てるだけなら簡単。セキュリティとパフォーマンスチューニングも、まあいずれ習得しなければならないので、積極的にやりたい。しかし、サーバの
　以前自分の記事をある人がツイッターで紹介してくれたのだが、その後短時間でサーバが一瞬で前後不覚に陥った。

　そこで今回はサイト構築に専念するため、お金を払ってサーバ屋さんにお願いすることに。

heroku

　まずherokuを検討した。herokuの無料プランはローカルストレージが使えないし、DBも5MBなので、herokuを使うなら有料になる事は前提にしていた。
　しかし、herokuはDB容量20GBだがサーバ設定はheroku任せ、他方Amazon EC2のマイクロインスタンスはローカル領域も使えるし鯖設定も変えられる。どちらもだいたい$15/month。ということで、とりあずEC2を試すことに。

Amazon EC2 マイクロインスタンス

　サーバの契約は簡単。OSも慣れたCentOS由来のAmazon Linuxを使え、設定上でつまづくことはなかった。しかしディスクI/Oが致命的に遅いことと、固定IPは別料金だということに若干不満があった。そこで、さらに丁度2週間のお試し期間を設けていたさくらのVPSを試してから、最終決定をすることにした。
 　
さくらVPS

　マイクロインスタンス（笑）
　と言ってしまうほど（少なくとも国内からは）速い。ベンチ結果はネット上に沢山あるので、速いだろうということは知っていたが、体感するとものすごい違い。ローカル領域も20GBあり、丁度MySQLからMongoDBに乗り換えていた頃だったので、さくらに鯖を作ることに決定。
　ただ、デフォルトのOSがCentOS 5.5で、リポジトリがクッソ古い。MySQLは5.0だし、Emacsは21だし、Rubyは1.8.5(!)だった。まあ、そのリポジトリの設定が少し面倒だっただけで、あまり大した問題ではないけれど。　　

